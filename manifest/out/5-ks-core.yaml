---
# Source: ks-core/templates/ks-controller-manager.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ks-controller-manager
    tier: backend
    version: v3.1.0
  name: ks-controller-manager
  namespace: kubesphere-system
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: ks-controller-manager
    tier: backend
    # version: v3.1.0
  sessionAffinity: None
  type: ClusterIP
---
# Source: ks-core/templates/ks-controller-manager.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-controller-manager
    tier: backend
    version: v3.1.0
  name: ks-controller-manager
  namespace: kubesphere-system
spec:
  strategy:
    rollingUpdate:
      maxSurge: 0
    type: RollingUpdate
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-controller-manager
      tier: backend
      # version: v3.1.0
  template:
    metadata:
      labels:
        app: ks-controller-manager
        tier: backend
        # version: v3.1.0
    spec:
      containers:
        - command:
            - controller-manager
            - --logtostderr=true
            - --leader-elect=true
          image: kubesphere/ks-controller-manager:v3.1.0
          imagePullPolicy: IfNotPresent
          name: ks-controller-manager
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 1000Mi
            requests:
              cpu: 30m
              memory: 50Mi
          volumeMounts:
            - mountPath: /etc/kubesphere/
              name: kubesphere-config
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: webhook-secret
            - mountPath: /var/lib/kubelet/plugins/
              name: kubelet-plugin
            - mountPath: /etc/localtime
              name: host-time
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccountName: kubesphere
      terminationGracePeriodSeconds: 30
      volumes:
        - name: kubesphere-config
          configMap:
            name: kubesphere-config
            defaultMode: 420
        - name: webhook-secret
          secret:
            defaultMode: 420
            secretName: ks-controller-manager-webhook-cert
        - name: kubelet-plugin
          hostPath:
            path: /var/lib/kubelet/plugins/
            type: DirectoryOrCreate
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 60
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 60
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - ""
---
# Source: ks-core/templates/ks-router-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ks-router-config
  namespace: kubesphere-system
data:
  ingress-controller-svc.yaml: |+
    apiVersion: v1
    kind: Service
    metadata:
    name: kubesphere-router-gateway
    labels:
        app: kubesphere
        component: ks-router
        tier: backend
    spec:
    selector:
        app: kubesphere
        component: ks-router
        tier: backend
    type: LoadBalancer
    ports:
        - name: http
        protocol: TCP
        port: 80
        targetPort: 80
        - name: https
        protocol: TCP
        port: 443
        targetPort: 443
  ingress-controller.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
    name: ks-router
    spec:
    replicas: 1
    selector:
        matchLabels:
        app: kubesphere
        component: ks-router
        tier: backend
    template:
        metadata:
        labels:
            app: kubesphere
            component: ks-router
            tier: backend
        annotations:
            prometheus.io/port: '10254'
            prometheus.io/scrape: 'true'
        spec:
        serviceAccountName: kubesphere-router-serviceaccount
        containers:
            - name: nginx-ingress-controller
            image: kubesphere/nginx-ingress-controller:v0.35.0
            args:
                - /nginx-ingress-controller
                - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
                - --annotations-prefix=nginx.ingress.kubernetes.io
                - --update-status
                - --update-status-on-shutdown
            env:
                - name: POD_NAME
                valueFrom:
                    fieldRef:
                    fieldPath: metadata.name
                - name: POD_NAMESPACE
                valueFrom:
                    fieldRef:
                    fieldPath: metadata.namespace
            ports:
            - name: http
                containerPort: 80
            - name: https
                containerPort: 443
            livenessProbe:
                failureThreshold: 3
                httpGet:
                path: /healthz
                port: 10254
                scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
            readinessProbe:
                failureThreshold: 3
                httpGet:
                path: /healthz
                port: 10254
                scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
            securityContext:
                runAsNonRoot: false
---
# Source: ks-core/templates/kubesphere-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubesphere-config
  namespace: kubesphere-system
data:
  kubesphere.yaml: |
    authentication:
      authenticateRateLimiterMaxTries: 10
      authenticateRateLimiterDuration: 10m0s
      loginHistoryRetentionPeriod: 168h
      maximumClockSkew: 10s
      multipleLogin: true
      kubectlImage: kubesphere/kubectl:latest
      jwtSecret: "wW7QYZA7g8lUb90BBtA2sh3guBMjn9Sm"
    monitoring:
      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubesphere-router-serviceaccount
  namespace: kubesphere-controls-system
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
# create a seviceaccount for kubectl pod
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubesphere-cluster-admin
  namespace: kubesphere-controls-system
  annotations:
    kubernetes.io/created-by: kubesphere.io/kubectl
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:kubesphere-router-clusterrole
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:nginx-ingress-clusterrole-nisa-binding
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kubesphere-router-clusterrole
subjects:
  - kind: ServiceAccount
    name: kubesphere-router-serviceaccount
    namespace: kubesphere-controls-system
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
# bind kubesphere-cluster-admin sa to clusterrole cluster-admin
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:kubesphere-cluster-admin
  annotations:
    kubernetes.io/created-by: kubesphere.io/kubectl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kubesphere-cluster-admin
    namespace: kubesphere-controls-system
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: system:kubesphere-router-role
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:kubesphere-router-role
subjects:
  - kind: ServiceAccount
    name: kubesphere-router-serviceaccount
    namespace: kubesphere-controls-system
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  labels:
    app: kubesphere
    component: kubesphere-router
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: kubesphere
    component: kubesphere-router
---
# Source: ks-core/templates/kubesphere-controls-system.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-http-backend
  labels:
    app: kubesphere
    component: kubesphere-router
    version: express-1.0.alpha
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubesphere
      component: kubesphere-router
  template:
    metadata:
      labels:
        app: kubesphere
        component: kubesphere-router
    spec:
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-http-backend
          # Any image is permissible as long as:
          # 1. It serves a 404 page at /
          # 2. It serves 200 on a /healthz endpoint
          image: mirrorgooglecontainers/defaultbackend-amd64:1.4
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
---
# Source: ks-core/templates/sample-bookinfo-configmap.yaml
apiVersion: v1
data:
  bookinfo.yaml: |
    apiVersion: app.k8s.io/v1beta1
    kind: Application
    metadata:
      name: bookinfo
      namespace: servicemesh
      labels:
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        servicemesh.kubesphere.io/enabled: 'true'
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      addOwnerRef: true
      descriptor:
        icons:
          - src: '/assets/bookinfo.svg'
      componentKinds:
        - group: ''
          kind: Service
        - group: apps
          kind: Deployment
        - group: apps
          kind: StatefulSet
        - group: extensions
          kind: Ingress
        - group: servicemesh.kubesphere.io
          kind: Strategy
        - group: servicemesh.kubesphere.io
          kind: ServicePolicy

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: productpage
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: productpage-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: productpage
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: productpage
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: productpage
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image:kubesphere/examples-bookinfo-productpage-v1:1.16.2
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: productpage
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: productpage
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: productpage
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: reviews
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: reviews-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: reviews
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: reviews
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: reviews
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image:kubesphere/examples-bookinfo-reviews-v1:1.16.2
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: reviews
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: reviews
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: reviews
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: details
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: details-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: details
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: details
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: details
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image:kubesphere/examples-bookinfo-details-v1:1.16.2
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: details
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: details
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: details
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: servicemesh
      annotations:
        kubesphere.io/isElasticReplicas: 'false'
        servicemesh.kubesphere.io/enabled: 'true'
      labels:
        app: ratings
        version: v1
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: ratings-v1
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ratings
          version: v1
          app.kubernetes.io/version: v1
          app.kubernetes.io/name: bookinfo
      template:
        metadata:
          labels:
            app: ratings
            version: v1
            app.kubernetes.io/version: v1
            app.kubernetes.io/name: bookinfo
          annotations:
            sidecar.istio.io/inject: 'true'
        spec:
          containers:
            - name: ratings
              resources:
                requests:
                  cpu: 10m
                  memory: 10Mi
                limits:
                  cpu: '1'
                  memory: 1000Mi
              imagePullPolicy: IfNotPresent
              image:kubesphere/examples-bookinfo-ratings-v1:1.16.3
              ports:
                - name: http-web
                  protocol: TCP
                  containerPort: 9080
                  servicePort: 9080
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
    ---
    apiVersion: v1
    kind: Service
    metadata:
      namespace: servicemesh
      labels:
        app: ratings
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      annotations:
        kubesphere.io/workloadType: Deployment
        servicemesh.kubesphere.io/enabled: 'true'
      name: ratings
    spec:
      type: ClusterIP
      sessionAffinity: None
      selector:
        app: ratings
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      ports:
        - name: http-web
          protocol: TCP
          port: 9080
          targetPort: 9080

    ---
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      namespace: servicemesh
      labels:
        app.kubernetes.io/version: v1
        app.kubernetes.io/name: bookinfo
      name: bookinfo-ingress
    spec:
      rules:
        - http:
            paths:
              - path: /
                backend:
                  serviceName: productpage
                  servicePort: 9080
          host: productpage.servicemesh.139.198.121.92.nip.io
kind: ConfigMap
metadata:
  name: sample-bookinfo
  namespace: kubesphere-system
---
# Source: ks-core/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubesphere
  namespace: kubesphere-system
  labels:
    helm.sh/chart: ks-core-0.1.0
    app.kubernetes.io/name: ks-core
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "v3.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: ks-core/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubesphere
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kubesphere
    namespace: kubesphere-system
---
---
# Source: ks-core/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: users.iam.kubesphere.io
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lRTEVZTnVlNFIrZURaZy9OM3dUNUJBVEFOQmdrcWhraUc5dzBCQVFzRkFEQWoKTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoYm1GblpYSXRZMkV3SGhjTk1qRXdOVEU0TURjMApNRE15V2hjTk16RXdOVEUyTURjME1ETXlXakFqTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoCmJtRm5aWEl0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQyOEJvMzNmR3IKLzN3T0w0Y2Y1LzJnN1o1WlhnTitoTTJpSE4vOXhNaE1rNE1qbVJFd2RDNGtrVGdEa0FYWWh6dnpWQ21vZDBDYQpUWHk0KzMyV1ZpM1NzdlVUcU1tMjFBQ1lkcUhVUzd0KzFWemhLckUzRnp4VDdVemcxdTNxSmxhMm9IVDAzUUl4CnlmV2lGcVhUaDQ1QjRhZGdKcFdXR2Rld1R4NG15ZkR1TzZsdU5hU3Z3bFRwVlFaUG5uaHZRSmlyRGNxT1JkT1kKRUlnT1JwZkVDTVlKRkxOVGkzWllQVzJza3U0YU9TN21QdzFiRVEyVTM1NDErZGVZR0xMUXQ1TE1oWEllRGk1UAp0MUUxcHM3SDYxanh0M09pblRyNUZ6UE9La2xFNjZoYkZVdUQvUGpOY1VZZkZmZFdtdlAwL2cyOEVlUlVlQVF0CkxqYVdlMHhuSjZIdkFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQTJRRGhTZ0JOVkdmcjdhWFdnNmMwYndlZUI3Mm1pN3lyVGhOMU9JbUxPNVc0bUd4bC9TN05YY2JmCjVMN3Q5M0Fkdld2TU1HQURzUGNZcFpYcERoa2xOenJCZzZxTWNWZHlhYWFpZUMrcHNPZHp4TllRcUl6b0pac0sKcEtkS1JhZUxiME9rQVlJRUtyUW0wUVpScVB3bVRiVC9GWkRSampVMUlOZEMzUFlYR0oxSDJPWHhwWXc0ZTBTawpKY1VpUG9wYWNIR1BDMmNGdHdXd0VYVEtzRzRHSUFvMUZjczlkYzZTR0dNVm1OQytDNDdUd09jN2pBc1dkTHZrCnNHWTFxVWlYUW4ydGdPSlhXaERHZGdpcW5jVWNxOGZrU1VYaHFNck9seVQ5OXkvMy92Myt1SlY1azhYa3UxL1cKWkt1OEk1YXJnT01OVFBvNzFBajBSb1Z5ZTFSNUJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
      service:
        name: ks-controller-manager
        namespace: kubesphere-system
        path: /validate-email-iam-kubesphere-io-v1alpha2
        port: 443
    failurePolicy: Fail
    matchPolicy: Exact
    name: users.iam.kubesphere.io
    namespaceSelector:
      matchExpressions:
        - key: control-plane
          operator: DoesNotExist
    objectSelector: {}
    rules:
      - apiGroups:
          - iam.kubesphere.io
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - users
        scope: '*'
    sideEffects: None
    timeoutSeconds: 30
---
# Source: ks-core/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: network.kubesphere.io
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lRTEVZTnVlNFIrZURaZy9OM3dUNUJBVEFOQmdrcWhraUc5dzBCQVFzRkFEQWoKTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoYm1GblpYSXRZMkV3SGhjTk1qRXdOVEU0TURjMApNRE15V2hjTk16RXdOVEUyTURjME1ETXlXakFqTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoCmJtRm5aWEl0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQyOEJvMzNmR3IKLzN3T0w0Y2Y1LzJnN1o1WlhnTitoTTJpSE4vOXhNaE1rNE1qbVJFd2RDNGtrVGdEa0FYWWh6dnpWQ21vZDBDYQpUWHk0KzMyV1ZpM1NzdlVUcU1tMjFBQ1lkcUhVUzd0KzFWemhLckUzRnp4VDdVemcxdTNxSmxhMm9IVDAzUUl4CnlmV2lGcVhUaDQ1QjRhZGdKcFdXR2Rld1R4NG15ZkR1TzZsdU5hU3Z3bFRwVlFaUG5uaHZRSmlyRGNxT1JkT1kKRUlnT1JwZkVDTVlKRkxOVGkzWllQVzJza3U0YU9TN21QdzFiRVEyVTM1NDErZGVZR0xMUXQ1TE1oWEllRGk1UAp0MUUxcHM3SDYxanh0M09pblRyNUZ6UE9La2xFNjZoYkZVdUQvUGpOY1VZZkZmZFdtdlAwL2cyOEVlUlVlQVF0CkxqYVdlMHhuSjZIdkFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQTJRRGhTZ0JOVkdmcjdhWFdnNmMwYndlZUI3Mm1pN3lyVGhOMU9JbUxPNVc0bUd4bC9TN05YY2JmCjVMN3Q5M0Fkdld2TU1HQURzUGNZcFpYcERoa2xOenJCZzZxTWNWZHlhYWFpZUMrcHNPZHp4TllRcUl6b0pac0sKcEtkS1JhZUxiME9rQVlJRUtyUW0wUVpScVB3bVRiVC9GWkRSampVMUlOZEMzUFlYR0oxSDJPWHhwWXc0ZTBTawpKY1VpUG9wYWNIR1BDMmNGdHdXd0VYVEtzRzRHSUFvMUZjczlkYzZTR0dNVm1OQytDNDdUd09jN2pBc1dkTHZrCnNHWTFxVWlYUW4ydGdPSlhXaERHZGdpcW5jVWNxOGZrU1VYaHFNck9seVQ5OXkvMy92Myt1SlY1azhYa3UxL1cKWkt1OEk1YXJnT01OVFBvNzFBajBSb1Z5ZTFSNUJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
      service:
        name: ks-controller-manager
        namespace: kubesphere-system
        path: /validate-network-kubesphere-io-v1alpha1
        port: 443
    failurePolicy: Fail
    matchPolicy: Exact
    name: validating-network.kubesphere.io
    namespaceSelector:
      matchExpressions:
        - key: control-plane
          operator: DoesNotExist
    objectSelector: {}
    rules:
      - apiGroups:
          - network.kubesphere.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - ippools
        scope: '*'
    sideEffects: None
    timeoutSeconds: 30
---
# Source: ks-core/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: resourcesquotas.quota.kubesphere.io
webhooks:
  - admissionReviewVersions:
      - v1beta1
    clientConfig:
      caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lRTEVZTnVlNFIrZURaZy9OM3dUNUJBVEFOQmdrcWhraUc5dzBCQVFzRkFEQWoKTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoYm1GblpYSXRZMkV3SGhjTk1qRXdOVEU0TURjMApNRE15V2hjTk16RXdOVEUyTURjME1ETXlXakFqTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoCmJtRm5aWEl0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQyOEJvMzNmR3IKLzN3T0w0Y2Y1LzJnN1o1WlhnTitoTTJpSE4vOXhNaE1rNE1qbVJFd2RDNGtrVGdEa0FYWWh6dnpWQ21vZDBDYQpUWHk0KzMyV1ZpM1NzdlVUcU1tMjFBQ1lkcUhVUzd0KzFWemhLckUzRnp4VDdVemcxdTNxSmxhMm9IVDAzUUl4CnlmV2lGcVhUaDQ1QjRhZGdKcFdXR2Rld1R4NG15ZkR1TzZsdU5hU3Z3bFRwVlFaUG5uaHZRSmlyRGNxT1JkT1kKRUlnT1JwZkVDTVlKRkxOVGkzWllQVzJza3U0YU9TN21QdzFiRVEyVTM1NDErZGVZR0xMUXQ1TE1oWEllRGk1UAp0MUUxcHM3SDYxanh0M09pblRyNUZ6UE9La2xFNjZoYkZVdUQvUGpOY1VZZkZmZFdtdlAwL2cyOEVlUlVlQVF0CkxqYVdlMHhuSjZIdkFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQTJRRGhTZ0JOVkdmcjdhWFdnNmMwYndlZUI3Mm1pN3lyVGhOMU9JbUxPNVc0bUd4bC9TN05YY2JmCjVMN3Q5M0Fkdld2TU1HQURzUGNZcFpYcERoa2xOenJCZzZxTWNWZHlhYWFpZUMrcHNPZHp4TllRcUl6b0pac0sKcEtkS1JhZUxiME9rQVlJRUtyUW0wUVpScVB3bVRiVC9GWkRSampVMUlOZEMzUFlYR0oxSDJPWHhwWXc0ZTBTawpKY1VpUG9wYWNIR1BDMmNGdHdXd0VYVEtzRzRHSUFvMUZjczlkYzZTR0dNVm1OQytDNDdUd09jN2pBc1dkTHZrCnNHWTFxVWlYUW4ydGdPSlhXaERHZGdpcW5jVWNxOGZrU1VYaHFNck9seVQ5OXkvMy92Myt1SlY1azhYa3UxL1cKWkt1OEk1YXJnT01OVFBvNzFBajBSb1Z5ZTFSNUJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
      service:
        name: ks-controller-manager
        namespace: kubesphere-system
        path: /validate-quota-kubesphere-io-v1alpha2
        port: 443
    failurePolicy: Ignore
    matchPolicy: Exact
    name: resourcesquotas.quota.kubesphere.io
    namespaceSelector: {}
    objectSelector: {}
    rules:
      - apiGroups:
          - '*'
        apiVersions:
          - '*'
        operations:
          - CREATE
        resources:
          - pods
        scope: '*'
    sideEffects: None
---
# Source: ks-core/templates/ks-console.yml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ks-console
    tier: frontend
    version: v3.1.0
  name: ks-console
  namespace: kubesphere-system
spec:
  ports:
    - name: nginx
      nodePort: 30880
      port: 80
      protocol: TCP
      targetPort: 8000

  selector:
    app: ks-console
    tier: frontend
  type: NodePort
---
# Source: ks-core/templates/ks-console.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-console
    tier: frontend
    version: v3.1.0
  name: ks-console
  namespace: kubesphere-system
spec:
  strategy:
    rollingUpdate:
      maxSurge: 0
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ks-console
      tier: frontend
  template:
    metadata:
      labels:
        app: ks-console
        tier: frontend
    spec:
      containers:
        - image: kubesphere/ks-console:v3.1.0
          imagePullPolicy: IfNotPresent
          name: ks-console
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 20m
              memory: 100Mi
          volumeMounts:
            - mountPath: /opt/kubesphere/console/server/local_config.yaml
              name: ks-console-config
              subPath: local_config.yaml
            - mountPath: /opt/kubesphere/console/server/sample
              name: sample-bookinfo
            - mountPath: /etc/localtime
              name: host-time
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 15
            timeoutSeconds: 15
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 8
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 60
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 60
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - ""
      volumes:
        - configMap:
            defaultMode: 420
            name: ks-console-config
            items:
              - key: local_config.yaml
                path: local_config.yaml
          name: ks-console-config
        - configMap:
            defaultMode: 420
            name: sample-bookinfo
          name: sample-bookinfo
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
---
# Source: ks-core/templates/ks-apiserver.yml
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubernetes.io/created-by: kubesphere.io/ks-apiserver
  labels:
    app: ks-apiserver
    tier: backend
    version: v3.1.0
  name: ks-apiserver
  namespace: kubesphere-system
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app: ks-apiserver
    tier: backend
    # version: v3.1.0
  type: ClusterIP
---
# Source: ks-core/templates/ks-apiserver.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ks-apiserver
    tier: backend
    version: v3.1.0
  name: ks-apiserver
  namespace: kubesphere-system
spec:
  strategy:
    rollingUpdate:
      maxSurge: 0
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ks-apiserver
      tier: backend
      # version: v3.1.0
  template:
    metadata:
      labels:
        app: ks-apiserver
        tier: backend
        # version: v3.1.0
    spec:
      containers:
        - command:
            - ks-apiserver
            - --logtostderr=true
            - --kubeconfig=/etc/kubeconfig/kubeconfig
          image: kubesphere/ks-apiserver:v3.1.0
          imagePullPolicy: IfNotPresent
          name: ks-apiserver
          ports:
            - containerPort: 9090
              protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 20m
              memory: 100Mi
          volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-sock
            - mountPath: /etc/kubesphere/ingress-controller
              name: ks-router-config
            - mountPath: /etc/kubesphere/
              name: kubesphere-config
            - mountPath: /etc/localtime
              name: host-time
            - mountPath: /etc/kubeconfig
              name: kubeconfig
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /kapis/version
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 15
            timeoutSeconds: 15
      serviceAccountName: kubesphere
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 60
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 60
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - ""
      volumes:
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: docker-sock
        - configMap:
            defaultMode: 420
            name: ks-router-config
          name: ks-router-config
        - configMap:
            defaultMode: 420
            name: kubesphere-config
          name: kubesphere-config
        - configMap:
            defaultMode: 420
            name: kubeconfig
          name: kubeconfig
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
---
# Source: ks-core/templates/ks-console-config.yml
apiVersion: v1
data:
  local_config.yaml: |
    server:
      http:
        hostname: localhost
        port: 8000
        static:
          production:
            /public: server/public
            /assets: dist/assets
            /dist: dist
      redis:
        port: 6379
        host: redis.kubesphere-system.svc
      redisTimeout: 5000
      sessionTimeout: 7200000
    client:
      version:
        kubesphere: v3.1.0
        kubernetes: v1.19.4
        openpitrix: v3.1.0
      enableKubeConfig: true
kind: ConfigMap
metadata:
  name: ks-console-config
  namespace: kubesphere-system
---
apiVersion: v1
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lRTEVZTnVlNFIrZURaZy9OM3dUNUJBVEFOQmdrcWhraUc5dzBCQVFzRkFEQWoKTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoYm1GblpYSXRZMkV3SGhjTk1qRXdOVEU0TURjMApNRE15V2hjTk16RXdOVEUyTURjME1ETXlXakFqTVNFd0h3WURWUVFERXhocmN5MWpiMjUwY205c2JHVnlMVzFoCmJtRm5aWEl0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQyOEJvMzNmR3IKLzN3T0w0Y2Y1LzJnN1o1WlhnTitoTTJpSE4vOXhNaE1rNE1qbVJFd2RDNGtrVGdEa0FYWWh6dnpWQ21vZDBDYQpUWHk0KzMyV1ZpM1NzdlVUcU1tMjFBQ1lkcUhVUzd0KzFWemhLckUzRnp4VDdVemcxdTNxSmxhMm9IVDAzUUl4CnlmV2lGcVhUaDQ1QjRhZGdKcFdXR2Rld1R4NG15ZkR1TzZsdU5hU3Z3bFRwVlFaUG5uaHZRSmlyRGNxT1JkT1kKRUlnT1JwZkVDTVlKRkxOVGkzWllQVzJza3U0YU9TN21QdzFiRVEyVTM1NDErZGVZR0xMUXQ1TE1oWEllRGk1UAp0MUUxcHM3SDYxanh0M09pblRyNUZ6UE9La2xFNjZoYkZVdUQvUGpOY1VZZkZmZFdtdlAwL2cyOEVlUlVlQVF0CkxqYVdlMHhuSjZIdkFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQTJRRGhTZ0JOVkdmcjdhWFdnNmMwYndlZUI3Mm1pN3lyVGhOMU9JbUxPNVc0bUd4bC9TN05YY2JmCjVMN3Q5M0Fkdld2TU1HQURzUGNZcFpYcERoa2xOenJCZzZxTWNWZHlhYWFpZUMrcHNPZHp4TllRcUl6b0pac0sKcEtkS1JhZUxiME9rQVlJRUtyUW0wUVpScVB3bVRiVC9GWkRSampVMUlOZEMzUFlYR0oxSDJPWHhwWXc0ZTBTawpKY1VpUG9wYWNIR1BDMmNGdHdXd0VYVEtzRzRHSUFvMUZjczlkYzZTR0dNVm1OQytDNDdUd09jN2pBc1dkTHZrCnNHWTFxVWlYUW4ydGdPSlhXaERHZGdpcW5jVWNxOGZrU1VYaHFNck9seVQ5OXkvMy92Myt1SlY1azhYa3UxL1cKWkt1OEk1YXJnT01OVFBvNzFBajBSb1Z5ZTFSNUJ3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlVENDQW1HZ0F3SUJBZ0lSQUlqdWs4SEFSMkRjZUc0dDFnY0NabXd3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWEzTXRZMjl1ZEhKdmJHeGxjaTF0WVc1aFoyVnlMV05oTUI0WERUSXhNRFV4T0RBMwpOREF6TWxvWERUTXhNRFV4TmpBM05EQXpNbG93S1RFbk1DVUdBMVVFQXhNZVVrVk1SVUZUUlMxT1FVMUZMV0ZrCmJXbHpjMmx2YmkxM1pXSm9iMjlyTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKclFQRmNjcllyVEdsRWRkWUcwQnJjbTNmSm9DV3FJS1Y0MzVuL2szU1A5bG4rcHlkeHVoOWdueDFIWXFQZjlGTAplakxhb2EzZU85K0loY3V2MGpLc2xOQkJpL01WVWtNaGhqNVdVMzhIQmxjd0M3NVRKWndmU1RyY0lkczB4S0d0Ci9NLy9ZZG0wOENwZnVQNG1GdHJsQ2ZEZHg5emsyM1k3Q2FGTm1hM1ZSWG0xcjJnS0dodEJ3cElIUG1kak1LZFIKSjFya0xEbzcwQm85WmswZ0pZaXArNUtQMWI4L09qdWZCb053RkVuajZKVTB0WjNTTy9Ba1g0T2VuN2F4VXA5RworUzR3WDQ2YVl1TnJFaHE1MWJKTk13cC9MWCtMM2dGQ2VLWENzY1d4b1BFWk1zcTZuNXoyUk4wdWpzM1E4cHAxCmFHT3F2RkNKSWRaMzdqUjBIT3kvV1FJREFRQUJvNEdoTUlHZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQmZCZ05WSFJFRQpXREJXZ2lkcmN5MWpiMjUwY205c2JHVnlMVzFoYm1GblpYSXVhM1ZpWlhOd2FHVnlaUzF6ZVhOMFpXMkNLMnR6CkxXTnZiblJ5YjJ4c1pYSXRiV0Z1WVdkbGNpNXJkV0psYzNCb1pYSmxMWE41YzNSbGJTNXpkbU13RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFNVjN2cGxOTlAxOFQ2eEpFN0I1b3h0RXovMUVnUmRUTllCNlF4SzVUeG1QQUYxOQo4T0h2V2Q0VnRvbGl3YTZDY21GdHFaYWxVYStNUm44SGRrZkRKeVU5VjJHMXd4MDFhb2tEZ0VjQ2twQ1gvdjZICkZpb0htbWlURWpmNVNQNTlERGNzbUdwMCtFMDVGSzZMM3dQTENZRVBVZzlOdnpWUE82UGUxcjFWZVFhTk92YTkKSVBOMkpUaXNpVnJUUlRMbGVKNVU0WGt1YXN3SnRzWSttc2k4OXVDRzZoZjV3THNZZ0JJQXN1S0JsVzg4OXpldQoybVowajV3blMyNjZxUjAyNWlPdmlBc1VyUmk4TXErb2xtL0I0UENnVjEzOVFPTC9yOHdZdmRGU2UvbWQ1Q2Z6CkcyWWRibkNJdTFDUEFkelBuSGw0MUFzejdwaCtjemlWMUVPUWtLMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclFQRmNjcllyVEdsRWRkWUcwQnJjbTNmSm9DV3FJS1Y0MzVuL2szU1A5bG4rcHlkCnh1aDlnbngxSFlxUGY5Rkxlakxhb2EzZU85K0loY3V2MGpLc2xOQkJpL01WVWtNaGhqNVdVMzhIQmxjd0M3NVQKSlp3ZlNUcmNJZHMweEtHdC9NLy9ZZG0wOENwZnVQNG1GdHJsQ2ZEZHg5emsyM1k3Q2FGTm1hM1ZSWG0xcjJnSwpHaHRCd3BJSFBtZGpNS2RSSjFya0xEbzcwQm85WmswZ0pZaXArNUtQMWI4L09qdWZCb053RkVuajZKVTB0WjNTCk8vQWtYNE9lbjdheFVwOUcrUzR3WDQ2YVl1TnJFaHE1MWJKTk13cC9MWCtMM2dGQ2VLWENzY1d4b1BFWk1zcTYKbjV6MlJOMHVqczNROHBwMWFHT3F2RkNKSWRaMzdqUjBIT3kvV1FJREFRQUJBb0lCQUhlMHhFZVhNWk9qWmJLUwpiRU51cnVqZFhDZ25rQlhIUkMzQ3AvRXJwdXpHWDBybVVjUHQxK2tRYzNlZEJ1eEl3eEFwWDF1K0VLVWNaRGt1ClZOZjZkNjMrNlZzTE5SVlZuVHhrcFJYZ0xkd1ZOd2pwQmw1ZlJzWkVFMHJaZ0FrTVZIVTI5RnVmWmJGRm9EVSsKb3R2dFY4c28vRW5zYSt2c1FheklEZ2ptWFVsVGFDTVJxM2xrZzBUaEczc2dkaUlGNkU2dGtPcmU5dElZTVlxdwpGUzFlUFd3WnY0enh1aFhjbUd1THJTamZVUEQ4aWJQMHNqR3A2amlyaWFPWVkrQmcwRnd2Nm9VQURxSFMyNmdLClIyc3RnUWw4WnhnNDBNM0M3NnU3VEdrNWg4TytlMW9UR2ZtVmlzelRNZ2JaOFIwWHlBWXFNTVpFb3hvcUlMSEIKTyszSXNBRUNnWUVBNWZDOGFiYUpXSGhaTnB3SW92UkJpNmxYNWJFb01IeHp6Z1VSNEZBdElrS2hTUm9OTjF4YQo2WUFTdTRvVWZPdVQwUVhMOGxQU1ZGM3BCTGRoVzBxc21UOFpYMDFXUWdSK1VWWWNpT3ZmUEZHTWFtSnBjNys0CkhWOFBnMGZjV3VJT0p0aGlpOWdvWVBENmlFWDEyeXlzU1d3dHA4Vk5mWXNqRDB5enBLajkrZWtDZ1lFQXdKOXoKVzZ5bCs5aGhHZEw5MFdLS05RYW1meWZnSys0MmxYdkhvQ1F5bzZxNFRUTUVNV0JlalFLMnFjUEZFSW9IQlJ0UwoxV1J2VUorOS80a2N2d21NSmVLTVlNTFpZdFlxbEc3L01CSFFTWHExb2NaanVuOWZCUW9yS0ovbGN2SE1YbTZQClJnTlpHUVNWMzhUa1NsL09LbDd1VnVGa1hyTmFBbVlOMU1tNHcvRUNnWUVBbExscDFHSlpZWnl0NzNGcThLTlYKeGRTcFlvcDhlU2YxNnpwQ1ByajlDRnphWHlMM2kyZ3o4VFdDYUVTK1RiSTlzSU8wVHkvQ0tnbDN6ekloU1YvNgpWVUNIMDZsODhrUmZ3NUlUOE1mSFl3ZEg4QU5wTzVHMHIyS3Q4UGJJNHd1MXBaQnQ1US9SeGluM2thN1dmNFhjCmhienZwc1VxQXRxOHVZZWQ1aEhiL0FrQ2dZQXR0T2hMcFpFUlRJdmw4OUgwb0Z4Skx0WE5NR29hSW9GalFTYmkKVWhTT0Q1R0NDQXdEcDJsb0xtK25vdU9kQkJPY1c1cHhOazdQbzhnUzNiY3JnWmwyMStZVmc4YlBsQ0F3YnBJeApGdGtFeHBCWTNkbUdSSGtJbWh3Wm5LOTJjZmZicElKc3k1aVZ2aWZPSEV0TGRxWldHWWFXcVE4SEJhbmpEZEpVClhyVndFUUtCZ0dKZEtRRWtDemdqaWVBN1doRFVKTGJBWjdoTEVLUy9aRkU1M3BqbmVZb3VYOHhTNXZ3Qnc5bjkKaHdRRFNLSlczTkxTUGZiazBUeFFqMHV3d25jcUpEaU1CSHhZT0RwTWh5Q3UxUGtzM296OHVHUlVyeHJra1F4OApqR2xEWFpxRVlLb082Y2wxaWFDaERpY0pvTzdMYVAwZURCWGdFMlVYWWQxN1VDZVVnNzlnCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
kind: Secret
metadata:
  name: ks-controller-manager-webhook-cert
  namespace: kubesphere-system
type: Opaque
