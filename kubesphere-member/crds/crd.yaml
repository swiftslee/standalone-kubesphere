# Copyright 2020 The Kubernetes Authors.
# SPDX-License-Identifier: Apache-2.0

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-sigs/application/pull/2
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: applications.app.k8s.io
spec:
  group: app.k8s.io
  names:
    categories:
    - all
    kind: Application
    listKind: ApplicationList
    plural: applications
    shortNames:
    - app
    singular: application
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The type of the application
      jsonPath: .spec.descriptor.type
      name: Type
      type: string
    - description: The creation date
      jsonPath: .spec.descriptor.version
      name: Version
      type: string
    - description: The application object owns the matched resources
      jsonPath: .spec.addOwnerRef
      name: Owner
      type: boolean
    - description: Numbers of components ready
      jsonPath: .status.componentsReady
      name: Ready
      type: string
    - description: The creation date
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Application is the Schema for the applications API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ApplicationSpec defines the specification for an Application.
            properties:
              addOwnerRef:
                description: AddOwnerRef objects - flag to indicate if we need to
                  add OwnerRefs to matching objects Matching is done by using Selector
                  to query all ComponentGroupKinds
                type: boolean
              assemblyPhase:
                description: AssemblyPhase represents the current phase of the application's
                  assembly. An empty value is equivalent to "Succeeded".
                type: string
              componentKinds:
                description: ComponentGroupKinds is a list of Kinds for Application's
                  components (e.g. Deployments, Pods, Services, CRDs). It can be used
                  in conjunction with the Application's Selector to list or watch
                  the Applications components.
                items:
                  description: GroupKind specifies a Group and a Kind, but does not
                    force a version.  This is useful for identifying concepts during
                    lookup stages without having partially valid types
                  properties:
                    group:
                      type: string
                    kind:
                      type: string
                  required:
                  - group
                  - kind
                  type: object
                type: array
              descriptor:
                description: Descriptor regroups information and metadata about an
                  application.
                properties:
                  description:
                    description: Description is a brief string description of the
                      Application.
                    type: string
                  icons:
                    description: Icons is an optional list of icons for an application.
                      Icon information includes the source, size, and mime type.
                    items:
                      description: ImageSpec contains information about an image used
                        as an icon.
                      properties:
                        size:
                          description: (optional) The size of the image in pixels
                            (e.g., 25x25).
                          type: string
                        src:
                          description: The source for image represented as either
                            an absolute URL to the image or a Data URL containing
                            the image. Data URLs are defined in RFC 2397.
                          type: string
                        type:
                          description: (optional) The mine type of the image (e.g.,
                            "image/png").
                          type: string
                      required:
                      - src
                      type: object
                    type: array
                  keywords:
                    description: Keywords is an optional list of key words associated
                      with the application (e.g. MySQL, RDBMS, database).
                    items:
                      type: string
                    type: array
                  links:
                    description: Links are a list of descriptive URLs intended to
                      be used to surface additional documentation, dashboards, etc.
                    items:
                      description: Link contains information about an URL to surface
                        documentation, dashboards, etc.
                      properties:
                        description:
                          description: Description is human readable content explaining
                            the purpose of the link.
                          type: string
                        url:
                          description: Url typically points at a website address.
                          type: string
                      type: object
                    type: array
                  maintainers:
                    description: Maintainers is an optional list of maintainers of
                      the application. The maintainers in this list maintain the the
                      source code, images, and package for the application.
                    items:
                      description: ContactData contains information about an individual
                        or organization.
                      properties:
                        email:
                          description: Email is the email address.
                          type: string
                        name:
                          description: Name is the descriptive name.
                          type: string
                        url:
                          description: Url could typically be a website address.
                          type: string
                      type: object
                    type: array
                  notes:
                    description: Notes contain a human readable snippets intended
                      as a quick start for the users of the Application. CommonMark
                      markdown syntax may be used for rich text representation.
                    type: string
                  owners:
                    description: Owners is an optional list of the owners of the installed
                      application. The owners of the application should be contacted
                      in the event of a planned or unplanned disruption affecting
                      the application.
                    items:
                      description: ContactData contains information about an individual
                        or organization.
                      properties:
                        email:
                          description: Email is the email address.
                          type: string
                        name:
                          description: Name is the descriptive name.
                          type: string
                        url:
                          description: Url could typically be a website address.
                          type: string
                      type: object
                    type: array
                  type:
                    description: Type is the type of the application (e.g. WordPress,
                      MySQL, Cassandra).
                    type: string
                  version:
                    description: Version is an optional version indicator for the
                      Application.
                    type: string
                type: object
              info:
                description: Info contains human readable key,value pairs for the
                  Application.
                items:
                  description: InfoItem is a human readable key,value pair containing
                    important information about how to access the Application.
                  properties:
                    name:
                      description: Name is a human readable title for this piece of
                        information.
                      type: string
                    type:
                      description: Type of the value for this InfoItem.
                      type: string
                    value:
                      description: Value is human readable content.
                      type: string
                    valueFrom:
                      description: ValueFrom defines a reference to derive the value
                        from another source.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            key:
                              description: The key to select.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        ingressRef:
                          description: Select an Ingress.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            host:
                              description: The optional host to select.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            path:
                              description: The optional HTTP path.
                              type: string
                            protocol:
                              description: Protocol for the ingress
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        secretKeyRef:
                          description: Selects a key of a Secret.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            key:
                              description: The key to select.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        serviceRef:
                          description: Select a Service.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object. TODO: this design is not final and this
                                field is subject to change in the future.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            path:
                              description: The optional HTTP path.
                              type: string
                            port:
                              description: The optional port to select.
                              format: int32
                              type: integer
                            protocol:
                              description: Protocol for the service
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        type:
                          description: Type of source.
                          type: string
                      type: object
                  type: object
                type: array
              selector:
                description: 'Selector is a label query over kinds that created by
                  the application. It must match the component objects'' labels. More
                  info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
            type: object
          status:
            description: ApplicationStatus defines controller's the observed state
              of Application
            properties:
              components:
                description: Object status array for all matching objects
                items:
                  description: ObjectStatus is a generic status holder for objects
                  properties:
                    group:
                      description: Object group
                      type: string
                    kind:
                      description: Kind of object
                      type: string
                    link:
                      description: Link to object
                      type: string
                    name:
                      description: Name of object
                      type: string
                    status:
                      description: 'Status. Values: InProgress, Ready, Unknown'
                      type: string
                  type: object
                type: array
              componentsReady:
                description: 'ComponentsReady: status of the components in the format
                  ready/total'
                type: string
              conditions:
                description: Conditions represents the latest state of the object
                items:
                  description: Condition describes the state of an object at a certain
                    point.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    lastUpdateTime:
                      description: Last time the condition was probed
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the most recent generation observed.
                  It corresponds to the Object's generation, which is updated on mutation
                  by the API Server.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: helmapplications.application.kubesphere.io
spec:
  group: application.kubesphere.io
  names:
    kind: HelmApplication
    listKind: HelmApplicationList
    plural: helmapplications
    shortNames:
    - happ
    singular: helmapplication
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.name
      name: application name
      type: string
    - jsonPath: .metadata.labels.kubesphere\.io/workspace
      name: workspace
      type: string
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmApplication is the Schema for the helmapplications API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmApplicationSpec defines the desired state of HelmApplication
            properties:
              abstraction:
                description: info from frontend
                type: string
              appHome:
                type: string
              attachments:
                description: attachments id
                items:
                  type: string
                type: array
              description:
                description: description from chart's description or frontend
                type: string
              icon:
                description: The attachment id of the icon
                type: string
              name:
                description: the name of the helm application
                type: string
            required:
            - name
            type: object
          status:
            description: HelmApplicationStatus defines the observed state of HelmApplication
            properties:
              latestVersion:
                description: If this application belong to appStore, latestVersion is the the latest version of the active application version. otherwise latestVersion is the latest version of all application version
                type: string
              state:
                description: 'the state of the helm application: draft, submitted, passed, rejected, suspended, active'
                type: string
              statusTime:
                format: date-time
                type: string
              updateTime:
                format: date-time
                type: string
            required:
            - statusTime
            - updateTime
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: helmapplicationversions.application.kubesphere.io
spec:
  group: application.kubesphere.io
  names:
    kind: HelmApplicationVersion
    listKind: HelmApplicationVersionList
    plural: helmapplicationversions
    shortNames:
    - happver
    singular: helmapplicationversion
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.name
      name: application name
      type: string
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmApplicationVersion is the Schema for the helmapplicationversions API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmApplicationVersionSpec defines the desired state of HelmApplicationVersion
            properties:
              annotations:
                additionalProperties:
                  type: string
                description: Annotations are additional mappings uninterpreted by Helm, made available for inspection by other applications.
                type: object
              apiVersion:
                description: The API Version of this chart.
                type: string
              appVersion:
                description: The version of the application enclosed inside of this chart.
                type: string
              condition:
                description: The condition to check to enable chart
                type: string
              created:
                description: chart create time
                format: date-time
                type: string
              data:
                description: raw data of chart, it will !!!NOT!!! be save to etcd
                format: byte
                type: string
              dataKey:
                description: dataKey in the storage
                type: string
              dependencies:
                description: Dependencies are a list of dependencies for a chart.
                items:
                  description: Dependency describes a chart upon which another chart depends. Dependencies can be used to express developer intent, or to capture the state of a chart.
                  properties:
                    alias:
                      description: Alias usable alias to be used for the chart
                      type: string
                    condition:
                      description: A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )
                      type: string
                    enabled:
                      description: Enabled bool determines if chart should be loaded
                      type: boolean
                    name:
                      description: Name is the name of the dependency. This must mach the name in the dependency's Chart.yaml.
                      type: string
                    repository:
                      description: The URL to the repository. Appending `index.yaml` to this string should result in a URL that can be used to fetch the repository index.
                      type: string
                    tags:
                      description: Tags can be used to group charts for enabling/disabling together
                      items:
                        type: string
                      type: array
                    version:
                      description: Version is the version (range) of this chart. A lock file will always produce a single version, while a dependency may contain a semantic version range.
                      type: string
                  required:
                  - name
                  - repository
                  type: object
                type: array
              deprecated:
                description: Whether or not this chart is deprecated
                type: boolean
              description:
                description: A one-sentence description of the chart
                type: string
              digest:
                description: chart digest
                type: string
              home:
                description: The URL to a relevant project page, git repo, or contact person
                type: string
              icon:
                description: The URL to an icon file.
                type: string
              keywords:
                description: A list of string keywords
                items:
                  type: string
                type: array
              kubeVersion:
                description: KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
                type: string
              maintainers:
                description: A list of name and URL/email address combinations for the maintainer(s)
                items:
                  description: Maintainer describes a Chart maintainer.
                  properties:
                    email:
                      description: Email is an optional email address to contact the named maintainer
                      type: string
                    name:
                      description: Name is a user name or organization name
                      type: string
                    url:
                      description: URL is an optional URL to an address for the named maintainer
                      type: string
                  type: object
                type: array
              name:
                description: The name of the chart
                type: string
              sources:
                description: Source is the URL to the source code of this chart
                items:
                  type: string
                type: array
              tags:
                description: The tags to check to enable chart
                type: string
              type:
                description: 'Specifies the chart type: application or library'
                type: string
              urls:
                description: chart url
                items:
                  type: string
                type: array
              version:
                description: A SemVer 2 conformant version string of the chart
                type: string
            type: object
          status:
            description: HelmApplicationVersionStatus defines the observed state of HelmApplicationVersion
            properties:
              audit:
                items:
                  properties:
                    message:
                      description: audit message
                      type: string
                    operator:
                      description: audit operator
                      type: string
                    operatorType:
                      type: string
                    state:
                      description: 'audit state: submitted, passed, draft, active, rejected, suspended'
                      type: string
                    time:
                      description: audit time
                      format: date-time
                      type: string
                  required:
                  - time
                  type: object
                type: array
              state:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: helmcategories.application.kubesphere.io
spec:
  group: application.kubesphere.io
  names:
    kind: HelmCategory
    listKind: HelmCategoryList
    plural: helmcategories
    shortNames:
    - hctg
    singular: helmcategory
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.name
      name: name
      type: string
    - jsonPath: .status.total
      name: total
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmCategory is the Schema for the helmcategories API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmCategorySpec defines the desired state of HelmRepo
            properties:
              description:
                description: info from frontend
                type: string
              locale:
                type: string
              name:
                description: name of the category
                type: string
            required:
            - name
            type: object
          status:
            properties:
              total:
                description: total helmapplications belong to this category
                type: integer
            required:
            - total
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: helmreleases.application.kubesphere.io
spec:
  group: application.kubesphere.io
  names:
    kind: HelmRelease
    listKind: HelmReleaseList
    plural: helmreleases
    shortNames:
    - hrls
    singular: helmrelease
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.name
      name: Release Name
      type: string
    - jsonPath: .metadata.labels.kubesphere\.io/workspace
      name: Workspace
      type: string
    - jsonPath: .metadata.labels.kubesphere\.io/cluster
      name: Cluster
      type: string
    - jsonPath: .metadata.labels.kubesphere\.io/namespace
      name: Namespace
      type: string
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmRelease is the Schema for the helmreleases API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmReleaseSpec defines the desired state of HelmRelease
            properties:
              appId:
                description: id of the helmapplication
                type: string
              appVerId:
                description: application version id
                type: string
              chartAppVer:
                description: appVersion from Chart.yaml
                type: string
              chartName:
                description: The name of the chart which will be installed.
                type: string
              chartVersion:
                description: Specify the exact chart version to install. If this is not specified, the latest version is installed
                type: string
              description:
                description: Message got from frontend
                type: string
              name:
                description: Name of the release
                type: string
              repoId:
                description: id of  the repo
                type: string
              values:
                description: helm release values.yaml
                format: byte
                type: string
              version:
                description: expected release version, when this version is not equal status.version, the release need upgrade this filed should be modified when any filed of the spec modified.
                type: integer
            required:
            - chartName
            - chartVersion
            - name
            - version
            type: object
          status:
            description: HelmReleaseStatus defines the observed state of HelmRelease
            properties:
              deployStatus:
                description: deploy status list of history, which will store at most 10 state
                items:
                  properties:
                    deployTime:
                      description: deploy time, upgrade time or check status time
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about why the release is in this state.
                      type: string
                    state:
                      description: current state of the release
                      type: string
                  required:
                  - deployTime
                  - state
                  type: object
                type: array
              lastDeployed:
                description: last deploy time or upgrade time
                format: date-time
                type: string
              lastUpdate:
                description: last update time
                format: date-time
                type: string
              message:
                description: A human readable message indicating details about why the release is in this state.
                type: string
              state:
                description: current state
                type: string
              version:
                description: current release version
                type: integer
            required:
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: helmrepos.application.kubesphere.io
spec:
  group: application.kubesphere.io
  names:
    kind: HelmRepo
    listKind: HelmRepoList
    plural: helmrepos
    shortNames:
    - hrepo
    singular: helmrepo
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.name
      name: name
      type: string
    - jsonPath: .metadata.labels.kubesphere\.io/workspace
      name: Workspace
      type: string
    - jsonPath: .spec.url
      name: url
      type: string
    - jsonPath: .status.state
      name: State
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmRepo is the Schema for the helmrepoes API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmRepoSpec defines the desired state of HelmRepo
            properties:
              credential:
                description: helm repo credential
                properties:
                  accessKeyID:
                    type: string
                  caFile:
                    description: verify certificates of HTTPS-enabled servers using this CA bundle
                    type: string
                  certFile:
                    description: identify HTTPS client using this SSL certificate file
                    type: string
                  insecureSkipTLSVerify:
                    description: skip tls certificate checks for the repository, default is ture
                    type: boolean
                  keyFile:
                    description: identify HTTPS client using this SSL key file
                    type: string
                  password:
                    description: chart repository password
                    type: string
                  secretAccessKey:
                    type: string
                  username:
                    description: chart repository username
                    type: string
                type: object
              description:
                description: chart repo description from frontend
                type: string
              name:
                description: name of the repo
                type: string
              syncPeriod:
                description: sync period in seconds, no sync when SyncPeriod=0, the minimum SyncPeriod is 180s
                type: integer
              url:
                description: helm repo url
                type: string
              version:
                description: expected repo version, when this version is not equal status.version, the repo need upgrade this filed should be modified when any filed of the spec modified.
                type: integer
            required:
            - name
            - url
            type: object
          status:
            description: HelmRepoStatus defines the observed state of HelmRepo
            properties:
              data:
                description: repo index
                type: string
              lastUpdateTime:
                description: status last update time
                format: date-time
                type: string
              state:
                description: current state of the repo, successful, failed or syncing
                type: string
              syncState:
                description: sync state list of history, which will store at most 10 state
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about why the repo is in this state.
                      type: string
                    state:
                      description: 'last sync state, valid state are: "failed", "success", and ""'
                      type: string
                    syncTime:
                      format: date-time
                      type: string
                  required:
                  - syncTime
                  type: object
                type: array
              version:
                description: if status.version!=spec.Version, we need sync the repo now
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: clusters.cluster.kubesphere.io
spec:
  group: cluster.kubesphere.io
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.joinFederation
      name: Federated
      type: boolean
    - jsonPath: .spec.provider
      name: Provider
      type: string
    - jsonPath: .spec.enable
      name: Active
      type: boolean
    - jsonPath: .status.kubernetesVersion
      name: Version
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cluster is the schema for the clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              connection:
                description: Connection holds info to connect to the member cluster
                properties:
                  kubeconfig:
                    description: KubeConfig content used to connect to cluster api server Should provide this field explicitly if connection type is direct. Will be populated by ks-proxy if connection type is proxy.
                    format: byte
                    type: string
                  kubernetesAPIEndpoint:
                    description: 'Kubernetes API Server endpoint. Example: https://10.10.0.1:6443 Should provide this field explicitly if connection type is direct. Will be populated by ks-apiserver if connection type is proxy.'
                    type: string
                  kubernetesAPIServerPort:
                    description: KubeAPIServerPort is the port which listens for forwarding kube-apiserver traffic Only applicable when connection type is proxy.
                    type: integer
                  kubesphereAPIEndpoint:
                    description: 'KubeSphere API Server endpoint. Example: http://10.10.0.11:8080 Should provide this field explicitly if connection type is direct. Will be populated by ks-apiserver if connection type is proxy.'
                    type: string
                  kubesphereAPIServerPort:
                    description: KubeSphereAPIServerPort is the port which listens for forwarding kubesphere apigateway traffic Only applicable when connection type is proxy.
                    type: integer
                  token:
                    description: Token used by agents of member cluster to connect to host cluster proxy. This field is populated by apiserver only if connection type is proxy.
                    type: string
                  type:
                    description: type defines how host cluster will connect to host cluster ConnectionTypeDirect means direct connection, this requires   kubeconfig and kubesphere apiserver endpoint provided ConnectionTypeProxy means using kubesphere proxy, no kubeconfig   or kubesphere apiserver endpoint required
                    type: string
                type: object
              enable:
                description: Desired state of the cluster
                type: boolean
              joinFederation:
                description: Join cluster as a kubefed cluster
                type: boolean
              provider:
                description: Provider of the cluster, this field is just for description
                type: string
            type: object
          status:
            properties:
              conditions:
                description: Represents the latest available observations of a cluster's current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status to another.
                      format: date-time
                      type: string
                    lastUpdateTime:
                      description: The last time this condition was updated.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of the condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              configz:
                additionalProperties:
                  type: boolean
                description: Configz is status of components enabled in the member cluster. This is synchronized with member cluster every amount of time, like 5 minutes.
                type: object
              kubeSphereVersion:
                description: GitVersion of the /kapis/version api response, this field is populated by cluster controller
                type: string
              kubernetesVersion:
                description: GitVersion of the kubernetes cluster, this field is populated by cluster controller
                type: string
              nodeCount:
                description: Count of the kubernetes cluster nodes This field may not reflect the instant status of the cluster.
                type: integer
              region:
                description: Region is the name of the region in which all of the nodes in the cluster exist.  e.g. 'us-east1'.
                type: string
              zones:
                description: Zones are the names of availability zones in which the nodes of the cluster exist, e.g. 'us-east1-a'.
                items:
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: devopsprojects.devops.kubesphere.io
spec:
  group: devops.kubesphere.io
  names:
    categories:
    - devops
    kind: DevOpsProject
    listKind: DevOpsProjectList
    plural: devopsprojects
    singular: devopsproject
  scope: Cluster
  versions:
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: DevOpsProject is the Schema for the devopsprojects API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DevOpsProjectSpec defines the desired state of DevOpsProject
            type: object
          status:
            description: DevOpsProjectStatus defines the observed state of DevOpsProject
            properties:
              adminNamespace:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file'
                type: string
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: pipelines.devops.kubesphere.io
spec:
  group: devops.kubesphere.io
  names:
    kind: Pipeline
    listKind: PipelineList
    plural: pipelines
    singular: pipeline
  scope: Namespaced
  versions:
  - name: v1alpha3
    schema:
      openAPIV3Schema:
        description: Pipeline is the Schema for the pipelines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PipelineSpec defines the desired state of Pipeline
            properties:
              multi_branch_pipeline:
                properties:
                  bitbucket_server_source:
                    properties:
                      api_uri:
                        type: string
                      credential_id:
                        type: string
                      discover_branches:
                        type: integer
                      discover_pr_from_forks:
                        properties:
                          strategy:
                            type: integer
                          trust:
                            type: integer
                        type: object
                      discover_pr_from_origin:
                        type: integer
                      discover_tags:
                        type: boolean
                      git_clone_option:
                        properties:
                          depth:
                            type: integer
                          shallow:
                            type: boolean
                          timeout:
                            type: integer
                        type: object
                      owner:
                        type: string
                      regex_filter:
                        type: string
                      repo:
                        type: string
                      scm_id:
                        type: string
                    type: object
                  description:
                    type: string
                  discarder:
                    properties:
                      days_to_keep:
                        type: string
                      num_to_keep:
                        type: string
                    type: object
                  git_source:
                    properties:
                      credential_id:
                        type: string
                      discover_branches:
                        type: boolean
                      discover_tags:
                        type: boolean
                      git_clone_option:
                        properties:
                          depth:
                            type: integer
                          shallow:
                            type: boolean
                          timeout:
                            type: integer
                        type: object
                      regex_filter:
                        type: string
                      scm_id:
                        type: string
                      url:
                        type: string
                    type: object
                  github_source:
                    description: GithubSource and BitbucketServerSource have the same structure, but we don't use one due to crd errors
                    properties:
                      api_uri:
                        type: string
                      credential_id:
                        type: string
                      discover_branches:
                        type: integer
                      discover_pr_from_forks:
                        properties:
                          strategy:
                            type: integer
                          trust:
                            type: integer
                        type: object
                      discover_pr_from_origin:
                        type: integer
                      discover_tags:
                        type: boolean
                      git_clone_option:
                        properties:
                          depth:
                            type: integer
                          shallow:
                            type: boolean
                          timeout:
                            type: integer
                        type: object
                      owner:
                        type: string
                      regex_filter:
                        type: string
                      repo:
                        type: string
                      scm_id:
                        type: string
                    type: object
                  gitlab_source:
                    properties:
                      api_uri:
                        type: string
                      credential_id:
                        type: string
                      discover_branches:
                        type: integer
                      discover_pr_from_forks:
                        properties:
                          strategy:
                            type: integer
                          trust:
                            type: integer
                        type: object
                      discover_pr_from_origin:
                        type: integer
                      discover_tags:
                        type: boolean
                      git_clone_option:
                        properties:
                          depth:
                            type: integer
                          shallow:
                            type: boolean
                          timeout:
                            type: integer
                        type: object
                      owner:
                        type: string
                      regex_filter:
                        type: string
                      repo:
                        type: string
                      scm_id:
                        type: string
                      server_name:
                        type: string
                    type: object
                  multibranch_job_trigger:
                    properties:
                      create_action_job_to_trigger:
                        type: string
                      delete_action_job_to_trigger:
                        type: string
                    type: object
                  name:
                    type: string
                  script_path:
                    type: string
                  single_svn_source:
                    properties:
                      credential_id:
                        type: string
                      remote:
                        type: string
                      scm_id:
                        type: string
                    type: object
                  source_type:
                    type: string
                  svn_source:
                    properties:
                      credential_id:
                        type: string
                      excludes:
                        type: string
                      includes:
                        type: string
                      remote:
                        type: string
                      scm_id:
                        type: string
                    type: object
                  timer_trigger:
                    properties:
                      cron:
                        description: user in no scm job
                        type: string
                      interval:
                        description: use in multi-branch job
                        type: string
                    type: object
                required:
                - name
                - script_path
                - source_type
                type: object
              pipeline:
                properties:
                  description:
                    type: string
                  disable_concurrent:
                    type: boolean
                  discarder:
                    properties:
                      days_to_keep:
                        type: string
                      num_to_keep:
                        type: string
                    type: object
                  jenkinsfile:
                    type: string
                  name:
                    type: string
                  parameters:
                    items:
                      properties:
                        default_value:
                          type: string
                        description:
                          type: string
                        name:
                          type: string
                        type:
                          type: string
                      required:
                      - name
                      - type
                      type: object
                    type: array
                  remote_trigger:
                    properties:
                      token:
                        type: string
                    type: object
                  timer_trigger:
                    properties:
                      cron:
                        description: user in no scm job
                        type: string
                      interval:
                        description: use in multi-branch job
                        type: string
                    type: object
                required:
                - name
                type: object
              type:
                description: 'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file'
                type: string
            required:
            - type
            type: object
          status:
            description: PipelineStatus defines the observed state of Pipeline
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: s2ibinaries.devops.kubesphere.io
spec:
  group: devops.kubesphere.io
  names:
    kind: S2iBinary
    listKind: S2iBinaryList
    plural: s2ibinaries
    singular: s2ibinary
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.fileName
      name: FileName
      type: string
    - jsonPath: .spec.md5
      name: MD5
      type: string
    - jsonPath: .spec.size
      name: Size
      type: string
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: S2iBinary is the Schema for the s2ibinaries API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: S2iBinarySpec defines the desired state of S2iBinary
            properties:
              downloadURL:
                description: DownloadURL in KubeSphere
                type: string
              fileName:
                description: FileName is filename of binary
                type: string
              md5:
                description: MD5 is Binary's MD5 Hash
                type: string
              size:
                description: Size is the file size of file
                type: string
              uploadTimeStamp:
                description: UploadTime is last upload time
                format: date-time
                type: string
            type: object
          status:
            description: S2iBinaryStatus defines the observed state of S2iBinary
            properties:
              phase:
                description: Phase is status of S2iBinary . Possible value is "Ready","UnableToDownload"
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: s2ibuilders.devops.kubesphere.io
spec:
  group: devops.kubesphere.io
  names:
    kind: S2iBuilder
    listKind: S2iBuilderList
    plural: s2ibuilders
    shortNames:
    - s2ib
    singular: s2ibuilder
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.runCount
      name: RunCount
      type: integer
    - jsonPath: .status.lastRunState
      name: LastRunState
      type: string
    - jsonPath: .status.lastRunName
      name: LastRunName
      type: string
    - jsonPath: .status.lastRunStartTime
      name: LastRunStartTime
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: S2iBuilder is the Schema for the s2ibuilders API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: S2iBuilderSpec defines the desired state of S2iBuilder
            properties:
              config:
                description: 'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file'
                properties:
                  addHost:
                    description: AddHost Add a line to /etc/hosts for test purpose or private use in LAN. Its format is host:IP,muliple hosts can be added  by using multiple --add-host
                    items:
                      type: string
                    type: array
                  asDockerfile:
                    description: AsDockerfile indicates the path where the Dockerfile should be written instead of building a new image.
                    type: string
                  assembleUser:
                    description: AssembleUser specifies the user to run the assemble script in container
                    type: string
                  blockOnBuild:
                    description: BlockOnBuild prevents s2i from performing a docker build operation if one is necessary to execute ONBUILD commands, or to layer source code into the container for images that don't have a tar binary available, if the image contains ONBUILD commands that would be executed.
                    type: boolean
                  branchExpression:
                    description: Regular expressions, ignoring names that do not match the provided regular expression
                    type: string
                  buildVolumes:
                    description: BuildVolumes specifies a list of volumes to mount to container running the build.
                    items:
                      type: string
                    type: array
                  builderBaseImageVersion:
                    description: BuilderBaseImageVersion provides optional version information about the builder base image.
                    type: string
                  builderImage:
                    description: BuilderImage describes which image is used for building the result images.
                    type: string
                  builderImageVersion:
                    description: BuilderImageVersion provides optional version information about the builder image.
                    type: string
                  builderPullPolicy:
                    description: BuilderPullPolicy specifies when to pull the builder image
                    type: string
                  callbackUrl:
                    description: CallbackURL is a URL which is called upon successful build to inform about that fact.
                    type: string
                  cgroupLimits:
                    description: CGroupLimits describes the cgroups limits that will be applied to any containers run by s2i.
                    properties:
                      cpuPeriod:
                        format: int64
                        type: integer
                      cpuQuota:
                        format: int64
                        type: integer
                      cpuShares:
                        format: int64
                        type: integer
                      memoryLimitBytes:
                        format: int64
                        type: integer
                      memorySwap:
                        format: int64
                        type: integer
                      parent:
                        type: string
                    required:
                    - cpuPeriod
                    - cpuQuota
                    - cpuShares
                    - memoryLimitBytes
                    - memorySwap
                    - parent
                    type: object
                  contextDir:
                    description: Specify a relative directory inside the application repository that should be used as a root directory for the application.
                    type: string
                  description:
                    description: Description is a result image description label. The default is no description.
                    type: string
                  destination:
                    description: Destination specifies a location where the untar operation will place its artifacts.
                    type: string
                  displayName:
                    description: DisplayName is a result image display-name label. This defaults to the output image name.
                    type: string
                  dockerConfig:
                    description: DockerConfig describes how to access host docker daemon.
                    properties:
                      caFile:
                        description: CAFile is the certificate authority file path for a TLS connection
                        type: string
                      certFile:
                        description: CertFile is the certificate file path for a TLS connection
                        type: string
                      endPoint:
                        description: Endpoint is the docker network endpoint or socket
                        type: string
                      keyFile:
                        description: KeyFile is the key file path for a TLS connection
                        type: string
                      tlsVerify:
                        description: TLSVerify indicates if TLS peer must be verified
                        type: boolean
                      useTLS:
                        description: UseTLS indicates if TLS must be used
                        type: boolean
                    required:
                    - caFile
                    - certFile
                    - endPoint
                    - keyFile
                    - tlsVerify
                    - useTLS
                    type: object
                  dockerNetworkMode:
                    description: DockerNetworkMode is used to set the docker network setting to --net=container:<id> when the builder is invoked from a container.
                    type: string
                  dropCapabilities:
                    description: DropCapabilities contains a list of capabilities to drop when executing containers
                    items:
                      type: string
                    type: array
                  environment:
                    description: Environment is a map of environment variables to be passed to the image.
                    items:
                      description: EnvironmentSpec specifies a single environment variable.
                      properties:
                        name:
                          type: string
                        value:
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  excludeRegExp:
                    description: ExcludeRegExp contains a string representation of the regular expression desired for deciding which files to exclude from the tar stream
                    type: string
                  export:
                    description: Export Push the result image to specify image registry in tag
                    type: boolean
                  gitSecretRef:
                    description: GitSecretRef is the BasicAuth Secret of Git Clone
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                  hasOnBuild:
                    description: HasOnBuild will be set to true if the builder image contains ONBUILD instructions
                    type: boolean
                  imageName:
                    description: ImageName Contains the registry address and reponame, tag should set by field tag alone
                    type: string
                  imageScriptsUrl:
                    description: ImageScriptsURL is the default location to find the assemble/run scripts for a builder image. This url can be a reference within the builder image if the scheme is specified as image://
                    type: string
                  imageWorkDir:
                    description: ImageWorkDir is the default working directory for the builder image.
                    type: string
                  incremental:
                    description: Incremental describes whether to try to perform incremental build.
                    type: boolean
                  incrementalAuthentication:
                    description: IncrementalAuthentication holds the authentication information for pulling the previous image from private repositories
                    properties:
                      email:
                        type: string
                      password:
                        type: string
                      secretRef:
                        description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                      serverAddress:
                        type: string
                      username:
                        type: string
                    type: object
                  incrementalFromTag:
                    description: IncrementalFromTag sets an alternative image tag to look for existing artifacts. Tag is used by default if this is not set.
                    type: string
                  injections:
                    description: Injections specifies a list source/destination folders that are injected to the container that runs assemble. All files we inject will be truncated after the assemble script finishes.
                    items:
                      description: VolumeSpec represents a single volume mount point.
                      properties:
                        destination:
                          description: Destination is the path to mount the volume to - absolute or relative.
                          type: string
                        keep:
                          description: Keep indicates if the mounted data should be kept in the final image.
                          type: boolean
                        source:
                          description: Source is a reference to the volume source.
                          type: string
                      type: object
                    type: array
                  isBinaryURL:
                    description: IsBinaryURL explain the type of SourceURL. If it is IsBinaryURL, it will download the file directly without using git.
                    type: boolean
                  keepSymlinks:
                    description: KeepSymlinks indicates to copy symlinks as symlinks. Default behavior is to follow symlinks and copy files by content.
                    type: boolean
                  labelNamespace:
                    description: LabelNamespace provides the namespace under which the labels will be generated.
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels specify labels and their values to be applied to the resulting image. Label keys must have non-zero length. The labels defined here override generated labels in case they have the same name.
                    type: object
                  layeredBuild:
                    description: LayeredBuild describes if this is build which layered scripts and sources on top of BuilderImage.
                    type: boolean
                  nodeAffinityKey:
                    description: The key of Node Affinity.
                    type: string
                  nodeAffinityValues:
                    description: The values of Node Affinity.
                    items:
                      type: string
                    type: array
                  outputBuildResult:
                    description: Whether output build result to status.
                    type: boolean
                  outputImageName:
                    description: OutputImageName is a result image name without tag, default is latest. tag will append to ImageName in the end
                    type: string
                  preserveWorkingDir:
                    description: PreserveWorkingDir describes if working directory should be left after processing.
                    type: boolean
                  previousImagePullPolicy:
                    description: PreviousImagePullPolicy specifies when to pull the previously build image when doing incremental build
                    type: string
                  pullAuthentication:
                    description: PullAuthentication holds the authentication information for pulling the Docker images from private repositories
                    properties:
                      email:
                        type: string
                      password:
                        type: string
                      secretRef:
                        description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                      serverAddress:
                        type: string
                      username:
                        type: string
                    type: object
                  pushAuthentication:
                    description: PullAuthentication holds the authentication information for pulling the Docker images from private repositories
                    properties:
                      email:
                        type: string
                      password:
                        type: string
                      secretRef:
                        description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                      serverAddress:
                        type: string
                      username:
                        type: string
                    type: object
                  removePreviousImage:
                    description: RemovePreviousImage describes if previous image should be removed after successful build. This applies only to incremental builds.
                    type: boolean
                  revisionId:
                    description: The RevisionId is a branch name or a SHA-1 hash of every important thing about the commit
                    type: string
                  runImage:
                    description: RunImage will trigger a "docker run ..." invocation of the produced image so the user can see if it operates as he would expect
                    type: boolean
                  runtimeArtifacts:
                    description: RuntimeArtifacts specifies a list of source/destination pairs that will be copied from builder to a runtime image. Source can be a file or directory. Destination must be a directory. Regardless whether it is an absolute or relative path, it will be placed into image's WORKDIR. Destination also can be empty or equals to ".", in this case it just refers to a root of WORKDIR. In case it's empty, S2I will try to get this list from io.openshift.s2i.assemble-input-files label on a RuntimeImage.
                    items:
                      description: VolumeSpec represents a single volume mount point.
                      properties:
                        destination:
                          description: Destination is the path to mount the volume to - absolute or relative.
                          type: string
                        keep:
                          description: Keep indicates if the mounted data should be kept in the final image.
                          type: boolean
                        source:
                          description: Source is a reference to the volume source.
                          type: string
                      type: object
                    type: array
                  runtimeAuthentication:
                    description: RuntimeAuthentication holds the authentication information for pulling the runtime Docker images from private repositories.
                    properties:
                      email:
                        type: string
                      password:
                        type: string
                      secretRef:
                        description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                      serverAddress:
                        type: string
                      username:
                        type: string
                    type: object
                  runtimeImage:
                    description: RuntimeImage specifies the image that will be a base for resulting image and will be used for running an application. By default, BuilderImage is used for building and running, but the latter may be overridden.
                    type: string
                  runtimeImagePullPolicy:
                    description: RuntimeImagePullPolicy specifies when to pull a runtime image.
                    type: string
                  scriptDownloadProxyConfig:
                    description: ScriptDownloadProxyConfig optionally specifies the http and https proxy to use when downloading scripts
                    properties:
                      httpProxy:
                        type: string
                      httpsProxy:
                        type: string
                    type: object
                  scriptsUrl:
                    description: ScriptsURL is a URL describing where to fetch the S2I scripts from during build process. This url can be a reference within the builder image if the scheme is specified as image://
                    type: string
                  secretCode:
                    description: SecretCode
                    type: string
                  securityOpt:
                    description: SecurityOpt are passed as options to the docker containers launched by s2i.
                    items:
                      type: string
                    type: array
                  sourceUrl:
                    description: SourceURL is  url of the codes such as https://github.com/a/b.git
                    type: string
                  tag:
                    description: Tag is a result image tag name.
                    type: string
                  taintKey:
                    description: The name of taint.
                    type: string
                  usage:
                    description: Usage allows for properly shortcircuiting s2i logic when `s2i usage` is invoked
                    type: boolean
                  workingDir:
                    description: WorkingDir describes temporary directory used for downloading sources, scripts and tar operations.
                    type: string
                  workingSourceDir:
                    description: WorkingSourceDir describes the subdirectory off of WorkingDir set up during the repo download that is later used as the root for ignore processing
                    type: string
                required:
                - imageName
                - sourceUrl
                type: object
              fromTemplate:
                description: FromTemplate define some inputs from user
                properties:
                  builderImage:
                    description: BaseImage specify which version of this template to use
                    type: string
                  name:
                    description: Name specify a template to use, so many fields in Config can left empty
                    type: string
                  parameters:
                    description: Parameters must use with `template`, fill some parameters which template will use
                    items:
                      properties:
                        defaultValue:
                          type: string
                        description:
                          type: string
                        key:
                          type: string
                        optValues:
                          items:
                            type: string
                          type: array
                        required:
                          type: boolean
                        type:
                          type: string
                        value:
                          type: string
                      type: object
                    type: array
                type: object
            type: object
          status:
            description: S2iBuilderStatus defines the observed state of S2iBuilder
            properties:
              lastRunName:
                description: LastRunState return the name of the newest run of this builder
                type: string
              lastRunStartTime:
                description: LastRunStartTime return the startTime of the newest run of this builder
                format: date-time
                type: string
              lastRunState:
                description: LastRunState return the state of the newest run of this builder
                type: string
              runCount:
                description: RunCount represent the sum of s2irun of this builder
                type: integer
            required:
            - runCount
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: s2ibuildertemplates.devops.kubesphere.io
spec:
  group: devops.kubesphere.io
  names:
    categories:
    - devops
    kind: S2iBuilderTemplate
    listKind: S2iBuilderTemplateList
    plural: s2ibuildertemplates
    shortNames:
    - s2ibt
    singular: s2ibuildertemplate
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.codeFramework
      name: Framework
      type: string
    - jsonPath: .spec.defaultBaseImage
      name: DefaultBaseImage
      type: string
    - jsonPath: .spec.version
      name: Version
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: S2iBuilderTemplate is the Schema for the s2ibuildertemplates API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: S2iBuilderTemplateSpec defines the desired state of S2iBuilderTemplate
            properties:
              codeFramework:
                description: CodeFramework means which language this template is designed for and which framework is using if has framework. Like Java, NodeJS etc
                type: string
              containerInfo:
                description: Images are the images this template will use.
                items:
                  properties:
                    buildVolumes:
                      description: BuildVolumes specifies a list of volumes to mount to container running the build.
                      items:
                        type: string
                      type: array
                    builderImage:
                      description: BaseImage are the images this template will use.
                      type: string
                    runtimeArtifacts:
                      items:
                        description: VolumeSpec represents a single volume mount point.
                        properties:
                          destination:
                            description: Destination is the path to mount the volume to - absolute or relative.
                            type: string
                          keep:
                            description: Keep indicates if the mounted data should be kept in the final image.
                            type: boolean
                          source:
                            description: Source is a reference to the volume source.
                            type: string
                        type: object
                      type: array
                    runtimeImage:
                      type: string
                  type: object
                type: array
              defaultBaseImage:
                description: DefaultBaseImage is the image that will be used by default
                type: string
              description:
                description: Description illustrate the purpose of this template
                type: string
              environment:
                description: Parameters is a set of environment variables to be passed to the image.
                items:
                  properties:
                    defaultValue:
                      type: string
                    description:
                      type: string
                    key:
                      type: string
                    optValues:
                      items:
                        type: string
                      type: array
                    required:
                      type: boolean
                    type:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              iconPath:
                description: IconPath is used for frontend display
                type: string
              version:
                description: Version of template
                type: string
            type: object
          status:
            description: S2iBuilderTemplateStatus defines the observed state of S2iBuilderTemplate
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: s2iruns.devops.kubesphere.io
spec:
  group: devops.kubesphere.io
  names:
    kind: S2iRun
    listKind: S2iRunList
    plural: s2iruns
    shortNames:
    - s2ir
    singular: s2irun
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.runState
      name: State
      type: string
    - jsonPath: .status.kubernetesJobName
      name: K8sJobName
      type: string
    - jsonPath: .status.startTime
      name: StartTime
      type: date
    - jsonPath: .status.completionTime
      name: CompletionTime
      type: date
    - jsonPath: .status.s2iBuildResult.imageName
      name: ImageName
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: S2iRun is the Schema for the s2iruns API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: S2iRunSpec defines the desired state of S2iRun
            properties:
              backoffLimit:
                description: BackoffLimit limits the restart count of each s2irun. Default is 0
                format: int32
                type: integer
              builderName:
                description: BuilderName specify the name of s2ibuilder, required
                type: string
              newRevisionId:
                description: NewRevisionId override the default NewRevisionId in its s2ibuilder.
                type: string
              newSourceURL:
                description: NewSourceURL is used to download new binary artifacts
                type: string
              newTag:
                description: NewTag override the default tag in its s2ibuilder, image name cannot be changed.
                type: string
              secondsAfterFinished:
                description: SecondsAfterFinished if is set and greater than zero, and the job created by s2irun become successful or failed , the job will be auto deleted after SecondsAfterFinished
                format: int32
                type: integer
            required:
            - builderName
            type: object
          status:
            description: S2iRunStatus defines the observed state of S2iRun
            properties:
              completionTime:
                description: Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
                format: date-time
                type: string
              kubernetesJobName:
                description: KubernetesJobName is the job name in k8s
                type: string
              logURL:
                description: LogURL is uesd for external log handler to let user know where is log located in
                type: string
              runState:
                description: RunState  indicates whether this job is done or failed
                type: string
              s2iBuildResult:
                description: S2i build result info.
                properties:
                  commandPull:
                    description: Command for pull image.
                    type: string
                  imageCreated:
                    description: Image created time.
                    type: string
                  imageID:
                    description: Image ID.
                    type: string
                  imageName:
                    description: ImageName is the name of artifact
                    type: string
                  imageRepoTags:
                    description: image tags.
                    items:
                      type: string
                    type: array
                  imageSize:
                    description: The size in bytes of the image
                    format: int64
                    type: integer
                type: object
              s2iBuildSource:
                description: S2i build source info.
                properties:
                  binaryName:
                    description: Binary file Name
                    type: string
                  binarySize:
                    description: Binary file Size
                    format: int64
                    type: integer
                  builderImage:
                    description: // BuilderImage describes which image is used for building the result images.
                    type: string
                  commitID:
                    description: CommitID represents an arbitrary extended object reference in Git as SHA-1
                    type: string
                  committerEmail:
                    description: CommitterEmail contains the e-mail of the committer
                    type: string
                  committerName:
                    description: CommitterName contains the name of the committer
                    type: string
                  description:
                    description: Description is a result image description label. The default is no description.
                    type: string
                  revisionId:
                    description: The RevisionId is a branch name or a SHA-1 hash of every important thing about the commit
                    type: string
                  sourceUrl:
                    description: SourceURL is  url of the codes such as https://github.com/a/b.git
                    type: string
                type: object
              startTime:
                description: StartTime represent when this run began
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: globalrolebindings.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: GlobalRoleBinding
    listKind: GlobalRoleBindingList
    plural: globalrolebindings
    singular: globalrolebinding
  scope: Cluster
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: GlobalRoleBinding is the Schema for the globalrolebindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          roleRef:
            description: RoleRef can only reference a GlobalRole. If the RoleRef cannot be resolved, the Authorizer must return an error.
            properties:
              apiGroup:
                description: APIGroup is the group for the resource being referenced
                type: string
              kind:
                description: Kind is the type of resource being referenced
                type: string
              name:
                description: Name is the name of resource being referenced
                type: string
            required:
            - apiGroup
            - kind
            - name
            type: object
          subjects:
            description: Subjects holds references to the objects the role applies to.
            items:
              description: Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
              properties:
                apiGroup:
                  description: APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
                  type: string
                kind:
                  description: Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
                  type: string
                name:
                  description: Name of the object being referenced.
                  type: string
                namespace:
                  description: Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
                  type: string
              required:
              - kind
              - name
              type: object
            type: array
        required:
        - roleRef
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: globalroles.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: GlobalRole
    listKind: GlobalRoleList
    plural: globalroles
    singular: globalrole
  scope: Cluster
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
            properties:
              name:
                maxLength: 63
                type: string
          rules:
            description: Rules holds all the PolicyRules for this GlobalRole
            items:
              description: PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
              properties:
                apiGroups:
                  description: APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
                  items:
                    type: string
                  type: array
                nonResourceURLs:
                  description: NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
                  items:
                    type: string
                  type: array
                resourceNames:
                  description: ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
                  items:
                    type: string
                  type: array
                resources:
                  description: Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
                  items:
                    type: string
                  type: array
                verbs:
                  description: Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
                  items:
                    type: string
                  type: array
              required:
              - verbs
              type: object
            type: array
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: groupbindings.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - group
    kind: GroupBinding
    listKind: GroupBindingList
    plural: groupbindings
    singular: groupbinding
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .groupRef.name
      name: Group
      type: string
    - jsonPath: .users
      name: Users
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: GroupBinding is the Schema for the groupbindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          groupRef:
            description: GroupRef defines the desired relation of GroupBinding
            properties:
              apiGroup:
                type: string
              kind:
                type: string
              name:
                type: string
            type: object
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          users:
            items:
              type: string
            type: array
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: groups.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - group
    kind: Group
    listKind: GroupList
    plural: groups
    singular: group
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels.kubesphere\.io/workspace
      name: Workspace
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: Group is the Schema for the groups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
            properties:
              name:
                maxLength: 32
                type: string
          spec:
            description: GroupSpec defines the desired state of Group
            type: object
          status:
            description: GroupStatus defines the observed state of Group
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: loginrecords.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: LoginRecord
    listKind: LoginRecordList
    plural: loginrecords
    singular: loginrecord
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.type
      name: Type
      type: string
    - jsonPath: .spec.provider
      name: Provider
      type: string
    - jsonPath: .spec.sourceIP
      name: From
      type: string
    - jsonPath: .spec.success
      name: Success
      type: string
    - jsonPath: .spec.reason
      name: Reason
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha2
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              provider:
                description: Provider of authentication, Ldap/Github etc.
                type: string
              reason:
                description: States failed login attempt reason
                type: string
              sourceIP:
                description: Source IP of client
                type: string
              success:
                description: Successful login attempt or not
                type: boolean
              type:
                description: Which authentication method used, BasicAuth/OAuth
                type: string
              userAgent:
                description: User agent of login attempt
                type: string
            required:
            - provider
            - reason
            - sourceIP
            - success
            - type
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: rolebases.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: RoleBase
    listKind: RoleBaseList
    plural: rolebases
    singular: rolebase
  scope: Cluster
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          role:
            type: object
            x-kubernetes-embedded-resource: true
            x-kubernetes-preserve-unknown-fields: true
        required:
        - role
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: users.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: User
    listKind: UserList
    plural: users
    singular: user
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.email
      name: Email
      type: string
    - jsonPath: .status.state
      name: Status
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: User is the Schema for the users API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
            properties:
              name:
                maxLength: 32
                type: string
          spec:
            description: UserSpec defines the desired state of User
            properties:
              description:
                description: Description of the user.
                type: string
              displayName:
                type: string
              email:
                description: Unique email address(https://www.ietf.org/rfc/rfc5322.txt).
                type: string
              groups:
                items:
                  type: string
                type: array
              lang:
                description: The preferred written or spoken language for the user.
                type: string
              password:
                description: password will be encrypted by mutating admission webhook
                type: string
            required:
            - email
            type: object
          status:
            description: UserStatus defines the observed state of User
            properties:
              lastLoginTime:
                description: Last login attempt timestamp
                format: date-time
                type: string
              lastTransitionTime:
                format: date-time
                type: string
              reason:
                type: string
              state:
                description: The user status
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: workspacerolebindings.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: WorkspaceRoleBinding
    listKind: WorkspaceRoleBindingList
    plural: workspacerolebindings
    singular: workspacerolebinding
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels.kubesphere\.io/workspace
      name: Workspace
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: WorkspaceRoleBinding is the Schema for the workspacerolebindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          roleRef:
            description: RoleRef can only reference a WorkspaceRole. If the RoleRef cannot be resolved, the Authorizer must return an error.
            properties:
              apiGroup:
                description: APIGroup is the group for the resource being referenced
                type: string
              kind:
                description: Kind is the type of resource being referenced
                type: string
              name:
                description: Name is the name of resource being referenced
                type: string
            required:
            - apiGroup
            - kind
            - name
            type: object
          subjects:
            description: Subjects holds references to the objects the role applies to.
            items:
              description: Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
              properties:
                apiGroup:
                  description: APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
                  type: string
                kind:
                  description: Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
                  type: string
                name:
                  description: Name of the object being referenced.
                  type: string
                namespace:
                  description: Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
                  type: string
              required:
              - kind
              - name
              type: object
            type: array
        required:
        - roleRef
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: workspaceroles.iam.kubesphere.io
spec:
  group: iam.kubesphere.io
  names:
    categories:
    - iam
    kind: WorkspaceRole
    listKind: WorkspaceRoleList
    plural: workspaceroles
    singular: workspacerole
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels.kubesphere\.io/workspace
      name: Workspace
      type: string
    - jsonPath: .metadata.annotations.kubesphere\.io/alias-name
      name: Alias
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
            properties:
              name:
                maxLength: 63
                type: string
          rules:
            description: Rules holds all the PolicyRules for this WorkspaceRole
            items:
              description: PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
              properties:
                apiGroups:
                  description: APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
                  items:
                    type: string
                  type: array
                nonResourceURLs:
                  description: NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
                  items:
                    type: string
                  type: array
                resourceNames:
                  description: ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
                  items:
                    type: string
                  type: array
                resources:
                  description: Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
                  items:
                    type: string
                  type: array
                verbs:
                  description: Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
                  items:
                    type: string
                  type: array
              required:
              - verbs
              type: object
            type: array
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: ipamblocks.network.kubesphere.io
spec:
  group: network.kubesphere.io
  names:
    kind: IPAMBlock
    listKind: IPAMBlockList
    plural: ipamblocks
    singular: ipamblock
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the IPAMBlock.
            properties:
              allocations:
                items:
                  type: integer
                type: array
              attributes:
                items:
                  properties:
                    handle_id:
                      type: string
                    secondary:
                      additionalProperties:
                        type: string
                      type: object
                  type: object
                type: array
              cidr:
                type: string
              deleted:
                type: boolean
              id:
                format: int32
                type: integer
              unallocated:
                items:
                  type: integer
                type: array
            required:
            - allocations
            - attributes
            - cidr
            - deleted
            - id
            - unallocated
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: ipamhandles.network.kubesphere.io
spec:
  group: network.kubesphere.io
  names:
    kind: IPAMHandle
    listKind: IPAMHandleList
    plural: ipamhandles
    singular: ipamhandle
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Specification of the IPAMHandle.
            properties:
              block:
                additionalProperties:
                  type: integer
                type: object
              deleted:
                type: boolean
              handleID:
                type: string
            required:
            - block
            - deleted
            - handleID
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: ippools.network.kubesphere.io
spec:
  group: network.kubesphere.io
  names:
    kind: IPPool
    listKind: IPPoolList
    plural: ippools
    singular: ippool
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              blockSize:
                description: The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 112 for IPv6.
                type: integer
              cidr:
                description: The pool CIDR.
                type: string
              disabled:
                description: When disabled is true, IPAM will not assign addresses from this pool.
                type: boolean
              dns:
                description: DNS contains values interesting for DNS resolvers
                properties:
                  domain:
                    type: string
                  nameservers:
                    items:
                      type: string
                    type: array
                  options:
                    items:
                      type: string
                    type: array
                  search:
                    items:
                      type: string
                    type: array
                type: object
              gateway:
                type: string
              rangeEnd:
                description: The last ip, inclusive
                type: string
              rangeStart:
                description: The first ip, inclusive
                type: string
              routes:
                items:
                  properties:
                    dst:
                      type: string
                    gateway:
                      type: string
                  type: object
                type: array
              type:
                type: string
              vlanConfig:
                properties:
                  master:
                    type: string
                  vlanId:
                    format: int32
                    type: integer
                required:
                - master
                - vlanId
                type: object
            required:
            - cidr
            - type
            type: object
          status:
            properties:
              allocations:
                type: integer
              capacity:
                type: integer
              reserved:
                type: integer
              synced:
                type: boolean
              unallocated:
                type: integer
              workspaces:
                additionalProperties:
                  properties:
                    allocations:
                      type: integer
                  required:
                  - allocations
                  type: object
                type: object
            required:
            - allocations
            - capacity
            - unallocated
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: namespacenetworkpolicies.network.kubesphere.io
spec:
  group: network.kubesphere.io
  names:
    categories:
    - networking
    kind: NamespaceNetworkPolicy
    listKind: NamespaceNetworkPolicyList
    plural: namespacenetworkpolicies
    shortNames:
    - nsnp
    singular: namespacenetworkpolicy
  scope: Namespaced
  preserveUnknownFields: false
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NamespaceNetworkPolicy is the Schema for the namespacenetworkpolicies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NamespaceNetworkPolicySpec provides the specification of a NamespaceNetworkPolicy
            properties:
              egress:
                description: List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
                items:
                  description: NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
                  properties:
                    ports:
                      description: List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
                      items:
                        description: NetworkPolicyPort describes a port to allow traffic on
                        properties:
                          port:
                            anyOf:
                            - type: integer
                            - type: string
                            description: The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
                            x-kubernetes-int-or-string: true
                          protocol:
                            default: TCP
                            description: The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                            type: string
                        type: object
                      type: array
                    to:
                      description: List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
                      items:
                        description: NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
                        properties:
                          ipBlock:
                            description: IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                                items:
                                  type: string
                                type: array
                            required:
                            - cidr
                            type: object
                          namespace:
                            properties:
                              name:
                                type: string
                            required:
                            - name
                            type: object
                          service:
                            properties:
                              name:
                                type: string
                              namespace:
                                type: string
                            required:
                            - name
                            - namespace
                            type: object
                        type: object
                      type: array
                  type: object
                type: array
              ingress:
                description: List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
                items:
                  description: NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
                  properties:
                    from:
                      description: List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
                      items:
                        description: NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
                        properties:
                          ipBlock:
                            description: IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                                items:
                                  type: string
                                type: array
                            required:
                            - cidr
                            type: object
                          namespace:
                            properties:
                              name:
                                type: string
                            required:
                            - name
                            type: object
                          service:
                            properties:
                              name:
                                type: string
                              namespace:
                                type: string
                            required:
                            - name
                            - namespace
                            type: object
                        type: object
                      type: array
                    ports:
                      description: List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
                      items:
                        description: NetworkPolicyPort describes a port to allow traffic on
                        properties:
                          port:
                            anyOf:
                            - type: integer
                            - type: string
                            description: The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
                            x-kubernetes-int-or-string: true
                          protocol:
                            default: TCP
                            description: The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              policyTypes:
                description: List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
                items:
                  description: Policy Type string describes the NetworkPolicy type This type is beta-level in 1.8
                  type: string
                type: array
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []


---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: resourcequotas.quota.kubesphere.io
spec:
  group: quota.kubesphere.io
  names:
    categories:
    - quota
    kind: ResourceQuota
    listKind: ResourceQuotaList
    plural: resourcequotas
    singular: resourcequota
  scope: Cluster
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: WorkspaceResourceQuota sets aggregate quota restrictions enforced per workspace
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired quota
            properties:
              quota:
                description: Quota defines the desired quota
                properties:
                  hard:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
                    type: object
                  scopeSelector:
                    description: scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
                    properties:
                      matchExpressions:
                        description: A list of scope selector requirements by scope of the resources.
                        items:
                          description: A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
                          properties:
                            operator:
                              description: Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
                              type: string
                            scopeName:
                              description: The name of the scope that the selector applies to.
                              type: string
                            values:
                              description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - operator
                          - scopeName
                          type: object
                        type: array
                    type: object
                  scopes:
                    description: A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
                    items:
                      description: A ResourceQuotaScope defines a filter that must match each object tracked by a quota
                      type: string
                    type: array
                type: object
              selector:
                additionalProperties:
                  type: string
                description: LabelSelector is used to select projects by label.
                type: object
            required:
            - quota
            - selector
            type: object
          status:
            description: Status defines the actual enforced quota and its current usage
            properties:
              namespaces:
                description: Namespaces slices the usage by project.
                items:
                  description: ResourceQuotaStatusByNamespace gives status for a particular project
                  properties:
                    hard:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: 'Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
                      type: object
                    namespace:
                      description: Namespace the project this status applies to
                      type: string
                    used:
                      additionalProperties:
                        anyOf:
                        - type: integer
                        - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      description: Used is the current observed total usage of the resource in the namespace.
                      type: object
                  required:
                  - namespace
                  type: object
                type: array
              total:
                description: Total defines the actual enforced quota and its current usage across all projects
                properties:
                  hard:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
                    type: object
                  used:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Used is the current observed total usage of the resource in the namespace.
                    type: object
                type: object
            required:
            - namespaces
            - total
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: servicepolicies.servicemesh.kubesphere.io
spec:
  group: servicemesh.kubesphere.io
  names:
    kind: ServicePolicy
    listKind: ServicePolicyList
    plural: servicepolicies
    singular: servicepolicy
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: ServicePolicy is the Schema for the servicepolicies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServicePolicySpec defines the desired state of ServicePolicy
            properties:
              selector:
                description: Label selector for destination rules.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
              template:
                description: Template used to create a destination rule
                properties:
                  metadata:
                    description: Metadata of the virtual services created from this template
                    type: object
                  spec:
                    description: Spec indicates the behavior of a destination rule.
                    properties:
                      export_to:
                        description: "A list of namespaces to which this destination rule is exported. The resolution of a destination rule to apply to a service occurs in the context of a hierarchy of namespaces. Exporting a destination rule allows it to be included in the resolution hierarchy for services in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of destination rules across namespace boundaries. \n If no namespaces are specified then the destination rule is exported to all namespaces by default. \n The value \".\" is reserved and defines an export to the same namespace that the destination rule is declared in. Similarly, the value \"*\" is reserved and defines an export to all namespaces. \n NOTE: in the current release, the `exportTo` value is restricted to \".\" or \"*\" (i.e., the current namespace or all namespaces)."
                        items:
                          type: string
                        type: array
                      host:
                        description: "The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntries](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Rules defined for services that do not exist in the service registry will be ignored. \n *Note for Kubernetes users*: When short names are used (e.g. \"reviews\" instead of \"reviews.default.svc.cluster.local\"), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the \"default\" namespace containing a host \"reviews\" will be interpreted as \"reviews.default.svc.cluster.local\", irrespective of the actual namespace associated with the reviews service. _To avoid potential misconfigurations, it is recommended to always use fully qualified domain names over short names._ \n Note that the host field applies to both HTTP and TCP services."
                        type: string
                      subsets:
                        description: One or more named sets that represent individual versions of a service. Traffic policies can be overridden at subset level.
                        items:
                          description: "A subset of endpoints of a service. Subsets can be used for scenarios like A/B testing, or routing to a specific version of a service. Refer to [VirtualService](https://istio.io/docs/reference/config/networking/virtual-service/#VirtualService) documentation for examples of using subsets in these scenarios. In addition, traffic policies defined at the service-level can be overridden at a subset-level. The following rule uses a round robin load balancing policy for all traffic going to a subset named testversion that is composed of endpoints (e.g., pods) with labels (version:v3). \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: DestinationRule metadata:   name: bookinfo-ratings spec:   host: ratings.prod.svc.cluster.local   trafficPolicy:     loadBalancer:       simple: LEAST_CONN   subsets:   - name: testversion     labels:       version: v3     trafficPolicy:       loadBalancer:         simple: ROUND_ROBIN ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: DestinationRule metadata:   name: bookinfo-ratings spec:   host: ratings.prod.svc.cluster.local   trafficPolicy:     loadBalancer:       simple: LEAST_CONN   subsets:   - name: testversion     labels:       version: v3     trafficPolicy:       loadBalancer:         simple: ROUND_ROBIN ``` {{</tab>}} {{</tabset>}} \n **Note:** Policies specified for subsets will not take effect until a route rule explicitly sends traffic to this subset. \n One or more labels are typically required to identify the subset destination, however, when the corresponding DestinationRule represents a host that supports multiple SNI hosts (e.g., an egress gateway), a subset without labels may be meaningful. In this case a traffic policy with [ClientTLSSettings](#ClientTLSSettings) can be used to identify a specific SNI host corresponding to the named subset."
                          properties:
                            labels:
                              additionalProperties:
                                type: string
                              description: Labels apply a filter over the endpoints of a service in the service registry. See route rules for examples of usage.
                              type: object
                            name:
                              description: Name of the subset. The service name and the subset name can be used for traffic splitting in a route rule.
                              type: string
                            traffic_policy:
                              description: Traffic policies that apply to this subset. Subsets inherit the traffic policies specified at the DestinationRule level. Settings specified at the subset level will override the corresponding settings specified at the DestinationRule level.
                              properties:
                                connection_pool:
                                  description: Settings controlling the volume of connections to an upstream service
                                  properties:
                                    http:
                                      description: HTTP connection pool settings.
                                      properties:
                                        h2_upgrade_policy:
                                          description: Specify if http1.1 connection should be upgraded to http2 for the associated destination.
                                          format: int32
                                          type: integer
                                        http1_max_pending_requests:
                                          description: Maximum number of pending HTTP requests to a destination. Default 2^32-1.
                                          format: int32
                                          type: integer
                                        http2_max_requests:
                                          description: Maximum number of requests to a backend. Default 2^32-1.
                                          format: int32
                                          type: integer
                                        idle_timeout:
                                          description: The idle timeout for upstream connection pool connections. The idle timeout is defined as the period in which there are no active requests. If not set, the default is 1 hour. When the idle timeout is reached the connection will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. Applies to both HTTP1.1 and HTTP2 connections.
                                          properties:
                                            nanos:
                                              description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                              format: int32
                                              type: integer
                                            seconds:
                                              description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                              format: int64
                                              type: integer
                                          type: object
                                        max_requests_per_connection:
                                          description: Maximum number of requests per connection to a backend. Setting this parameter to 1 disables keep alive. Default 0, meaning "unlimited", up to 2^29.
                                          format: int32
                                          type: integer
                                        max_retries:
                                          description: Maximum number of retries that can be outstanding to all hosts in a cluster at a given time. Defaults to 2^32-1.
                                          format: int32
                                          type: integer
                                      type: object
                                    tcp:
                                      description: Settings common to both HTTP and TCP upstream connections.
                                      properties:
                                        connect_timeout:
                                          description: 'TCP connection timeout. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                          properties:
                                            nanos:
                                              description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                              format: int32
                                              type: integer
                                            seconds:
                                              description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                              format: int64
                                              type: integer
                                          type: object
                                        max_connections:
                                          description: Maximum number of HTTP1 /TCP connections to a destination host. Default 2^32-1.
                                          format: int32
                                          type: integer
                                        tcp_keepalive:
                                          description: If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
                                          properties:
                                            interval:
                                              description: The time duration between keep-alive probes. Default is to use the OS level configuration (unless overridden, Linux defaults to 75s.)
                                              properties:
                                                nanos:
                                                  description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                  format: int32
                                                  type: integer
                                                seconds:
                                                  description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                  format: int64
                                                  type: integer
                                              type: object
                                            probes:
                                              description: Maximum number of keepalive probes to send without response before deciding the connection is dead. Default is to use the OS level configuration (unless overridden, Linux defaults to 9.)
                                              format: int32
                                              type: integer
                                            time:
                                              description: The time duration a connection needs to be idle before keep-alive probes start being sent. Default is to use the OS level configuration (unless overridden, Linux defaults to 7200s (ie 2 hours.)
                                              properties:
                                                nanos:
                                                  description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                  format: int32
                                                  type: integer
                                                seconds:
                                                  description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                  format: int64
                                                  type: integer
                                              type: object
                                          type: object
                                      type: object
                                  type: object
                                load_balancer:
                                  description: Settings controlling the load balancer algorithms.
                                  properties:
                                    locality_lb_setting:
                                      description: Locality load balancer settings, this will override mesh wide settings in entirety, meaning no merging would be performed between this object and the object one in MeshConfig
                                      properties:
                                        distribute:
                                          description: 'Optional: only one of distribute or failover can be set. Explicitly specify loadbalancing weight across different zones and geographical locations. Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight) If empty, the locality weight is set according to the endpoints number within it.'
                                          items:
                                            description: 'Describes how traffic originating in the ''from'' zone or sub-zone is distributed over a set of ''to'' zones. Syntax for specifying a zone is {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any segment of the specification. Examples: * - matches all localities us-west/* - all zones and sub-zones within the us-west region us-west/zone-1/* - all sub-zones within us-west/zone-1'
                                            properties:
                                              from:
                                                description: Originating locality, '/' separated, e.g. 'region/zone/sub_zone'.
                                                type: string
                                              to:
                                                additionalProperties:
                                                  format: int32
                                                  type: integer
                                                description: Map of upstream localities to traffic distribution weights. The sum of all weights should be == 100. Any locality not assigned a weight will receive no traffic.
                                                type: object
                                            type: object
                                          type: array
                                        enabled:
                                          description: enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety. e.g. true means that turn on locality load balancing for this DestinationRule no matter what mesh wide settings is.
                                          properties:
                                            value:
                                              description: The bool value.
                                              type: boolean
                                          type: object
                                        failover:
                                          description: 'Optional: only failover or distribute can be set. Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy. Should be used together with OutlierDetection to detect unhealthy endpoints. Note: if no OutlierDetection specified, this will not take effect.'
                                          items:
                                            description: Specify the traffic failover policy across regions. Since zone and sub-zone failover is supported by default this only needs to be specified for regions when the operator needs to constrain traffic failover so that the default behavior of failing over to any endpoint globally does not apply. This is useful when failing over traffic across regions would not improve service health or may need to be restricted for other reasons like regulatory controls.
                                            properties:
                                              from:
                                                description: Originating region.
                                                type: string
                                              to:
                                                description: Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.
                                                type: string
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                                outlier_detection:
                                  description: Settings controlling eviction of unhealthy hosts from the load balancing pool
                                  properties:
                                    base_ejection_time:
                                      description: 'Minimum ejection duration. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected. This technique allows the system to automatically increase the ejection period for unhealthy upstream servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.'
                                      properties:
                                        nanos:
                                          description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                          format: int32
                                          type: integer
                                        seconds:
                                          description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                          format: int64
                                          type: integer
                                      type: object
                                    consecutive_5xx_errors:
                                      description: "Number of 5xx errors before a host is ejected from the connection pool. When the upstream host is accessed over an opaque TCP connection, connect timeouts, connection error/failure and request failure events qualify as a 5xx error. This feature defaults to 5 but can be disabled by setting the value to 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                      properties:
                                        value:
                                          description: The uint32 value.
                                          format: int32
                                          type: integer
                                      type: object
                                    consecutive_errors:
                                      description: Number of errors before a host is ejected from the connection pool. Defaults to 5. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as an error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as an error. $hide_from_docs
                                      format: int32
                                      type: integer
                                    consecutive_gateway_errors:
                                      description: "Number of gateway errors before a host is ejected from the connection pool. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as a gateway error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as a gateway error. This feature is disabled by default or when set to the value 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                      properties:
                                        value:
                                          description: The uint32 value.
                                          format: int32
                                          type: integer
                                      type: object
                                    interval:
                                      description: 'Time interval between ejection sweep analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                      properties:
                                        nanos:
                                          description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                          format: int32
                                          type: integer
                                        seconds:
                                          description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                          format: int64
                                          type: integer
                                      type: object
                                    max_ejection_percent:
                                      description: Maximum % of hosts in the load balancing pool for the upstream service that can be ejected. Defaults to 10%.
                                      format: int32
                                      type: integer
                                    min_health_percent:
                                      description: Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode. When the percentage of healthy hosts in the load balancing pool drops below this threshold, outlier detection will be disabled and the proxy will load balance across all hosts in the pool (healthy and unhealthy). The threshold can be disabled by setting it to 0%. The default is 0% as it's not typically applicable in k8s environments with few pods per service.
                                      format: int32
                                      type: integer
                                  type: object
                                port_level_settings:
                                  description: Traffic policies specific to individual ports. Note that port level settings will override the destination-level settings. Traffic settings specified at the destination-level will not be inherited when overridden by port-level settings, i.e. default values will be applied to fields omitted in port-level traffic policies.
                                  items:
                                    description: Traffic policies that apply to specific ports of the service
                                    properties:
                                      connection_pool:
                                        description: Settings controlling the volume of connections to an upstream service
                                        properties:
                                          http:
                                            description: HTTP connection pool settings.
                                            properties:
                                              h2_upgrade_policy:
                                                description: Specify if http1.1 connection should be upgraded to http2 for the associated destination.
                                                format: int32
                                                type: integer
                                              http1_max_pending_requests:
                                                description: Maximum number of pending HTTP requests to a destination. Default 2^32-1.
                                                format: int32
                                                type: integer
                                              http2_max_requests:
                                                description: Maximum number of requests to a backend. Default 2^32-1.
                                                format: int32
                                                type: integer
                                              idle_timeout:
                                                description: The idle timeout for upstream connection pool connections. The idle timeout is defined as the period in which there are no active requests. If not set, the default is 1 hour. When the idle timeout is reached the connection will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. Applies to both HTTP1.1 and HTTP2 connections.
                                                properties:
                                                  nanos:
                                                    description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                    format: int32
                                                    type: integer
                                                  seconds:
                                                    description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                    format: int64
                                                    type: integer
                                                type: object
                                              max_requests_per_connection:
                                                description: Maximum number of requests per connection to a backend. Setting this parameter to 1 disables keep alive. Default 0, meaning "unlimited", up to 2^29.
                                                format: int32
                                                type: integer
                                              max_retries:
                                                description: Maximum number of retries that can be outstanding to all hosts in a cluster at a given time. Defaults to 2^32-1.
                                                format: int32
                                                type: integer
                                            type: object
                                          tcp:
                                            description: Settings common to both HTTP and TCP upstream connections.
                                            properties:
                                              connect_timeout:
                                                description: 'TCP connection timeout. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                                properties:
                                                  nanos:
                                                    description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                    format: int32
                                                    type: integer
                                                  seconds:
                                                    description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                    format: int64
                                                    type: integer
                                                type: object
                                              max_connections:
                                                description: Maximum number of HTTP1 /TCP connections to a destination host. Default 2^32-1.
                                                format: int32
                                                type: integer
                                              tcp_keepalive:
                                                description: If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
                                                properties:
                                                  interval:
                                                    description: The time duration between keep-alive probes. Default is to use the OS level configuration (unless overridden, Linux defaults to 75s.)
                                                    properties:
                                                      nanos:
                                                        description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                        format: int32
                                                        type: integer
                                                      seconds:
                                                        description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                        format: int64
                                                        type: integer
                                                    type: object
                                                  probes:
                                                    description: Maximum number of keepalive probes to send without response before deciding the connection is dead. Default is to use the OS level configuration (unless overridden, Linux defaults to 9.)
                                                    format: int32
                                                    type: integer
                                                  time:
                                                    description: The time duration a connection needs to be idle before keep-alive probes start being sent. Default is to use the OS level configuration (unless overridden, Linux defaults to 7200s (ie 2 hours.)
                                                    properties:
                                                      nanos:
                                                        description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                        format: int32
                                                        type: integer
                                                      seconds:
                                                        description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                        format: int64
                                                        type: integer
                                                    type: object
                                                type: object
                                            type: object
                                        type: object
                                      load_balancer:
                                        description: Settings controlling the load balancer algorithms.
                                        properties:
                                          locality_lb_setting:
                                            description: Locality load balancer settings, this will override mesh wide settings in entirety, meaning no merging would be performed between this object and the object one in MeshConfig
                                            properties:
                                              distribute:
                                                description: 'Optional: only one of distribute or failover can be set. Explicitly specify loadbalancing weight across different zones and geographical locations. Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight) If empty, the locality weight is set according to the endpoints number within it.'
                                                items:
                                                  description: 'Describes how traffic originating in the ''from'' zone or sub-zone is distributed over a set of ''to'' zones. Syntax for specifying a zone is {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any segment of the specification. Examples: * - matches all localities us-west/* - all zones and sub-zones within the us-west region us-west/zone-1/* - all sub-zones within us-west/zone-1'
                                                  properties:
                                                    from:
                                                      description: Originating locality, '/' separated, e.g. 'region/zone/sub_zone'.
                                                      type: string
                                                    to:
                                                      additionalProperties:
                                                        format: int32
                                                        type: integer
                                                      description: Map of upstream localities to traffic distribution weights. The sum of all weights should be == 100. Any locality not assigned a weight will receive no traffic.
                                                      type: object
                                                  type: object
                                                type: array
                                              enabled:
                                                description: enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety. e.g. true means that turn on locality load balancing for this DestinationRule no matter what mesh wide settings is.
                                                properties:
                                                  value:
                                                    description: The bool value.
                                                    type: boolean
                                                type: object
                                              failover:
                                                description: 'Optional: only failover or distribute can be set. Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy. Should be used together with OutlierDetection to detect unhealthy endpoints. Note: if no OutlierDetection specified, this will not take effect.'
                                                items:
                                                  description: Specify the traffic failover policy across regions. Since zone and sub-zone failover is supported by default this only needs to be specified for regions when the operator needs to constrain traffic failover so that the default behavior of failing over to any endpoint globally does not apply. This is useful when failing over traffic across regions would not improve service health or may need to be restricted for other reasons like regulatory controls.
                                                  properties:
                                                    from:
                                                      description: Originating region.
                                                      type: string
                                                    to:
                                                      description: Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.
                                                      type: string
                                                  type: object
                                                type: array
                                            type: object
                                        type: object
                                      outlier_detection:
                                        description: Settings controlling eviction of unhealthy hosts from the load balancing pool
                                        properties:
                                          base_ejection_time:
                                            description: 'Minimum ejection duration. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected. This technique allows the system to automatically increase the ejection period for unhealthy upstream servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.'
                                            properties:
                                              nanos:
                                                description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                format: int32
                                                type: integer
                                              seconds:
                                                description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                format: int64
                                                type: integer
                                            type: object
                                          consecutive_5xx_errors:
                                            description: "Number of 5xx errors before a host is ejected from the connection pool. When the upstream host is accessed over an opaque TCP connection, connect timeouts, connection error/failure and request failure events qualify as a 5xx error. This feature defaults to 5 but can be disabled by setting the value to 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                            properties:
                                              value:
                                                description: The uint32 value.
                                                format: int32
                                                type: integer
                                            type: object
                                          consecutive_errors:
                                            description: Number of errors before a host is ejected from the connection pool. Defaults to 5. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as an error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as an error. $hide_from_docs
                                            format: int32
                                            type: integer
                                          consecutive_gateway_errors:
                                            description: "Number of gateway errors before a host is ejected from the connection pool. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as a gateway error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as a gateway error. This feature is disabled by default or when set to the value 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                            properties:
                                              value:
                                                description: The uint32 value.
                                                format: int32
                                                type: integer
                                            type: object
                                          interval:
                                            description: 'Time interval between ejection sweep analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                            properties:
                                              nanos:
                                                description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                format: int32
                                                type: integer
                                              seconds:
                                                description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                format: int64
                                                type: integer
                                            type: object
                                          max_ejection_percent:
                                            description: Maximum % of hosts in the load balancing pool for the upstream service that can be ejected. Defaults to 10%.
                                            format: int32
                                            type: integer
                                          min_health_percent:
                                            description: Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode. When the percentage of healthy hosts in the load balancing pool drops below this threshold, outlier detection will be disabled and the proxy will load balance across all hosts in the pool (healthy and unhealthy). The threshold can be disabled by setting it to 0%. The default is 0% as it's not typically applicable in k8s environments with few pods per service.
                                            format: int32
                                            type: integer
                                        type: object
                                      port:
                                        description: Specifies the number of a port on the destination service on which this policy is being applied.
                                        properties:
                                          number:
                                            description: Valid port number
                                            format: int32
                                            type: integer
                                        type: object
                                      tls:
                                        description: TLS related settings for connections to the upstream service.
                                        properties:
                                          ca_certificates:
                                            description: 'OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server''s certificate. Should be empty if mode is `ISTIO_MUTUAL`.'
                                            type: string
                                          client_certificate:
                                            description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client-side TLS certificate to use. Should be empty if mode is `ISTIO_MUTUAL`.
                                            type: string
                                          mode:
                                            description: Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced.
                                            format: int32
                                            type: integer
                                          private_key:
                                            description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client's private key. Should be empty if mode is `ISTIO_MUTUAL`.
                                            type: string
                                          sni:
                                            description: SNI string to present to the server during TLS handshake.
                                            type: string
                                          subject_alt_names:
                                            description: A list of alternate names to verify the subject identity in the certificate. If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. If specified, this list overrides the value of subject_alt_names from the ServiceEntry.
                                            items:
                                              type: string
                                            type: array
                                        type: object
                                    type: object
                                  type: array
                                tls:
                                  description: TLS related settings for connections to the upstream service.
                                  properties:
                                    ca_certificates:
                                      description: 'OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server''s certificate. Should be empty if mode is `ISTIO_MUTUAL`.'
                                      type: string
                                    client_certificate:
                                      description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client-side TLS certificate to use. Should be empty if mode is `ISTIO_MUTUAL`.
                                      type: string
                                    mode:
                                      description: Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced.
                                      format: int32
                                      type: integer
                                    private_key:
                                      description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client's private key. Should be empty if mode is `ISTIO_MUTUAL`.
                                      type: string
                                    sni:
                                      description: SNI string to present to the server during TLS handshake.
                                      type: string
                                    subject_alt_names:
                                      description: A list of alternate names to verify the subject identity in the certificate. If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. If specified, this list overrides the value of subject_alt_names from the ServiceEntry.
                                      items:
                                        type: string
                                      type: array
                                  type: object
                              type: object
                          type: object
                        type: array
                      traffic_policy:
                        description: Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
                        properties:
                          connection_pool:
                            description: Settings controlling the volume of connections to an upstream service
                            properties:
                              http:
                                description: HTTP connection pool settings.
                                properties:
                                  h2_upgrade_policy:
                                    description: Specify if http1.1 connection should be upgraded to http2 for the associated destination.
                                    format: int32
                                    type: integer
                                  http1_max_pending_requests:
                                    description: Maximum number of pending HTTP requests to a destination. Default 2^32-1.
                                    format: int32
                                    type: integer
                                  http2_max_requests:
                                    description: Maximum number of requests to a backend. Default 2^32-1.
                                    format: int32
                                    type: integer
                                  idle_timeout:
                                    description: The idle timeout for upstream connection pool connections. The idle timeout is defined as the period in which there are no active requests. If not set, the default is 1 hour. When the idle timeout is reached the connection will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. Applies to both HTTP1.1 and HTTP2 connections.
                                    properties:
                                      nanos:
                                        description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                        format: int32
                                        type: integer
                                      seconds:
                                        description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                        format: int64
                                        type: integer
                                    type: object
                                  max_requests_per_connection:
                                    description: Maximum number of requests per connection to a backend. Setting this parameter to 1 disables keep alive. Default 0, meaning "unlimited", up to 2^29.
                                    format: int32
                                    type: integer
                                  max_retries:
                                    description: Maximum number of retries that can be outstanding to all hosts in a cluster at a given time. Defaults to 2^32-1.
                                    format: int32
                                    type: integer
                                type: object
                              tcp:
                                description: Settings common to both HTTP and TCP upstream connections.
                                properties:
                                  connect_timeout:
                                    description: 'TCP connection timeout. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                    properties:
                                      nanos:
                                        description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                        format: int32
                                        type: integer
                                      seconds:
                                        description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                        format: int64
                                        type: integer
                                    type: object
                                  max_connections:
                                    description: Maximum number of HTTP1 /TCP connections to a destination host. Default 2^32-1.
                                    format: int32
                                    type: integer
                                  tcp_keepalive:
                                    description: If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
                                    properties:
                                      interval:
                                        description: The time duration between keep-alive probes. Default is to use the OS level configuration (unless overridden, Linux defaults to 75s.)
                                        properties:
                                          nanos:
                                            description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                            format: int32
                                            type: integer
                                          seconds:
                                            description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                            format: int64
                                            type: integer
                                        type: object
                                      probes:
                                        description: Maximum number of keepalive probes to send without response before deciding the connection is dead. Default is to use the OS level configuration (unless overridden, Linux defaults to 9.)
                                        format: int32
                                        type: integer
                                      time:
                                        description: The time duration a connection needs to be idle before keep-alive probes start being sent. Default is to use the OS level configuration (unless overridden, Linux defaults to 7200s (ie 2 hours.)
                                        properties:
                                          nanos:
                                            description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                            format: int32
                                            type: integer
                                          seconds:
                                            description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                            format: int64
                                            type: integer
                                        type: object
                                    type: object
                                type: object
                            type: object
                          load_balancer:
                            description: Settings controlling the load balancer algorithms.
                            properties:
                              locality_lb_setting:
                                description: Locality load balancer settings, this will override mesh wide settings in entirety, meaning no merging would be performed between this object and the object one in MeshConfig
                                properties:
                                  distribute:
                                    description: 'Optional: only one of distribute or failover can be set. Explicitly specify loadbalancing weight across different zones and geographical locations. Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight) If empty, the locality weight is set according to the endpoints number within it.'
                                    items:
                                      description: 'Describes how traffic originating in the ''from'' zone or sub-zone is distributed over a set of ''to'' zones. Syntax for specifying a zone is {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any segment of the specification. Examples: * - matches all localities us-west/* - all zones and sub-zones within the us-west region us-west/zone-1/* - all sub-zones within us-west/zone-1'
                                      properties:
                                        from:
                                          description: Originating locality, '/' separated, e.g. 'region/zone/sub_zone'.
                                          type: string
                                        to:
                                          additionalProperties:
                                            format: int32
                                            type: integer
                                          description: Map of upstream localities to traffic distribution weights. The sum of all weights should be == 100. Any locality not assigned a weight will receive no traffic.
                                          type: object
                                      type: object
                                    type: array
                                  enabled:
                                    description: enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety. e.g. true means that turn on locality load balancing for this DestinationRule no matter what mesh wide settings is.
                                    properties:
                                      value:
                                        description: The bool value.
                                        type: boolean
                                    type: object
                                  failover:
                                    description: 'Optional: only failover or distribute can be set. Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy. Should be used together with OutlierDetection to detect unhealthy endpoints. Note: if no OutlierDetection specified, this will not take effect.'
                                    items:
                                      description: Specify the traffic failover policy across regions. Since zone and sub-zone failover is supported by default this only needs to be specified for regions when the operator needs to constrain traffic failover so that the default behavior of failing over to any endpoint globally does not apply. This is useful when failing over traffic across regions would not improve service health or may need to be restricted for other reasons like regulatory controls.
                                      properties:
                                        from:
                                          description: Originating region.
                                          type: string
                                        to:
                                          description: Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.
                                          type: string
                                      type: object
                                    type: array
                                type: object
                            type: object
                          outlier_detection:
                            description: Settings controlling eviction of unhealthy hosts from the load balancing pool
                            properties:
                              base_ejection_time:
                                description: 'Minimum ejection duration. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected. This technique allows the system to automatically increase the ejection period for unhealthy upstream servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.'
                                properties:
                                  nanos:
                                    description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                    format: int32
                                    type: integer
                                  seconds:
                                    description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                    format: int64
                                    type: integer
                                type: object
                              consecutive_5xx_errors:
                                description: "Number of 5xx errors before a host is ejected from the connection pool. When the upstream host is accessed over an opaque TCP connection, connect timeouts, connection error/failure and request failure events qualify as a 5xx error. This feature defaults to 5 but can be disabled by setting the value to 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                properties:
                                  value:
                                    description: The uint32 value.
                                    format: int32
                                    type: integer
                                type: object
                              consecutive_errors:
                                description: Number of errors before a host is ejected from the connection pool. Defaults to 5. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as an error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as an error. $hide_from_docs
                                format: int32
                                type: integer
                              consecutive_gateway_errors:
                                description: "Number of gateway errors before a host is ejected from the connection pool. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as a gateway error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as a gateway error. This feature is disabled by default or when set to the value 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                properties:
                                  value:
                                    description: The uint32 value.
                                    format: int32
                                    type: integer
                                type: object
                              interval:
                                description: 'Time interval between ejection sweep analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                properties:
                                  nanos:
                                    description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                    format: int32
                                    type: integer
                                  seconds:
                                    description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                    format: int64
                                    type: integer
                                type: object
                              max_ejection_percent:
                                description: Maximum % of hosts in the load balancing pool for the upstream service that can be ejected. Defaults to 10%.
                                format: int32
                                type: integer
                              min_health_percent:
                                description: Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode. When the percentage of healthy hosts in the load balancing pool drops below this threshold, outlier detection will be disabled and the proxy will load balance across all hosts in the pool (healthy and unhealthy). The threshold can be disabled by setting it to 0%. The default is 0% as it's not typically applicable in k8s environments with few pods per service.
                                format: int32
                                type: integer
                            type: object
                          port_level_settings:
                            description: Traffic policies specific to individual ports. Note that port level settings will override the destination-level settings. Traffic settings specified at the destination-level will not be inherited when overridden by port-level settings, i.e. default values will be applied to fields omitted in port-level traffic policies.
                            items:
                              description: Traffic policies that apply to specific ports of the service
                              properties:
                                connection_pool:
                                  description: Settings controlling the volume of connections to an upstream service
                                  properties:
                                    http:
                                      description: HTTP connection pool settings.
                                      properties:
                                        h2_upgrade_policy:
                                          description: Specify if http1.1 connection should be upgraded to http2 for the associated destination.
                                          format: int32
                                          type: integer
                                        http1_max_pending_requests:
                                          description: Maximum number of pending HTTP requests to a destination. Default 2^32-1.
                                          format: int32
                                          type: integer
                                        http2_max_requests:
                                          description: Maximum number of requests to a backend. Default 2^32-1.
                                          format: int32
                                          type: integer
                                        idle_timeout:
                                          description: The idle timeout for upstream connection pool connections. The idle timeout is defined as the period in which there are no active requests. If not set, the default is 1 hour. When the idle timeout is reached the connection will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. Applies to both HTTP1.1 and HTTP2 connections.
                                          properties:
                                            nanos:
                                              description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                              format: int32
                                              type: integer
                                            seconds:
                                              description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                              format: int64
                                              type: integer
                                          type: object
                                        max_requests_per_connection:
                                          description: Maximum number of requests per connection to a backend. Setting this parameter to 1 disables keep alive. Default 0, meaning "unlimited", up to 2^29.
                                          format: int32
                                          type: integer
                                        max_retries:
                                          description: Maximum number of retries that can be outstanding to all hosts in a cluster at a given time. Defaults to 2^32-1.
                                          format: int32
                                          type: integer
                                      type: object
                                    tcp:
                                      description: Settings common to both HTTP and TCP upstream connections.
                                      properties:
                                        connect_timeout:
                                          description: 'TCP connection timeout. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                          properties:
                                            nanos:
                                              description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                              format: int32
                                              type: integer
                                            seconds:
                                              description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                              format: int64
                                              type: integer
                                          type: object
                                        max_connections:
                                          description: Maximum number of HTTP1 /TCP connections to a destination host. Default 2^32-1.
                                          format: int32
                                          type: integer
                                        tcp_keepalive:
                                          description: If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
                                          properties:
                                            interval:
                                              description: The time duration between keep-alive probes. Default is to use the OS level configuration (unless overridden, Linux defaults to 75s.)
                                              properties:
                                                nanos:
                                                  description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                  format: int32
                                                  type: integer
                                                seconds:
                                                  description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                  format: int64
                                                  type: integer
                                              type: object
                                            probes:
                                              description: Maximum number of keepalive probes to send without response before deciding the connection is dead. Default is to use the OS level configuration (unless overridden, Linux defaults to 9.)
                                              format: int32
                                              type: integer
                                            time:
                                              description: The time duration a connection needs to be idle before keep-alive probes start being sent. Default is to use the OS level configuration (unless overridden, Linux defaults to 7200s (ie 2 hours.)
                                              properties:
                                                nanos:
                                                  description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                                  format: int32
                                                  type: integer
                                                seconds:
                                                  description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                                  format: int64
                                                  type: integer
                                              type: object
                                          type: object
                                      type: object
                                  type: object
                                load_balancer:
                                  description: Settings controlling the load balancer algorithms.
                                  properties:
                                    locality_lb_setting:
                                      description: Locality load balancer settings, this will override mesh wide settings in entirety, meaning no merging would be performed between this object and the object one in MeshConfig
                                      properties:
                                        distribute:
                                          description: 'Optional: only one of distribute or failover can be set. Explicitly specify loadbalancing weight across different zones and geographical locations. Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight) If empty, the locality weight is set according to the endpoints number within it.'
                                          items:
                                            description: 'Describes how traffic originating in the ''from'' zone or sub-zone is distributed over a set of ''to'' zones. Syntax for specifying a zone is {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any segment of the specification. Examples: * - matches all localities us-west/* - all zones and sub-zones within the us-west region us-west/zone-1/* - all sub-zones within us-west/zone-1'
                                            properties:
                                              from:
                                                description: Originating locality, '/' separated, e.g. 'region/zone/sub_zone'.
                                                type: string
                                              to:
                                                additionalProperties:
                                                  format: int32
                                                  type: integer
                                                description: Map of upstream localities to traffic distribution weights. The sum of all weights should be == 100. Any locality not assigned a weight will receive no traffic.
                                                type: object
                                            type: object
                                          type: array
                                        enabled:
                                          description: enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety. e.g. true means that turn on locality load balancing for this DestinationRule no matter what mesh wide settings is.
                                          properties:
                                            value:
                                              description: The bool value.
                                              type: boolean
                                          type: object
                                        failover:
                                          description: 'Optional: only failover or distribute can be set. Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy. Should be used together with OutlierDetection to detect unhealthy endpoints. Note: if no OutlierDetection specified, this will not take effect.'
                                          items:
                                            description: Specify the traffic failover policy across regions. Since zone and sub-zone failover is supported by default this only needs to be specified for regions when the operator needs to constrain traffic failover so that the default behavior of failing over to any endpoint globally does not apply. This is useful when failing over traffic across regions would not improve service health or may need to be restricted for other reasons like regulatory controls.
                                            properties:
                                              from:
                                                description: Originating region.
                                                type: string
                                              to:
                                                description: Destination region the traffic will fail over to when endpoints in the 'from' region becomes unhealthy.
                                                type: string
                                            type: object
                                          type: array
                                      type: object
                                  type: object
                                outlier_detection:
                                  description: Settings controlling eviction of unhealthy hosts from the load balancing pool
                                  properties:
                                    base_ejection_time:
                                      description: 'Minimum ejection duration. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected. This technique allows the system to automatically increase the ejection period for unhealthy upstream servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.'
                                      properties:
                                        nanos:
                                          description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                          format: int32
                                          type: integer
                                        seconds:
                                          description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                          format: int64
                                          type: integer
                                      type: object
                                    consecutive_5xx_errors:
                                      description: "Number of 5xx errors before a host is ejected from the connection pool. When the upstream host is accessed over an opaque TCP connection, connect timeouts, connection error/failure and request failure events qualify as a 5xx error. This feature defaults to 5 but can be disabled by setting the value to 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                      properties:
                                        value:
                                          description: The uint32 value.
                                          format: int32
                                          type: integer
                                      type: object
                                    consecutive_errors:
                                      description: Number of errors before a host is ejected from the connection pool. Defaults to 5. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as an error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as an error. $hide_from_docs
                                      format: int32
                                      type: integer
                                    consecutive_gateway_errors:
                                      description: "Number of gateway errors before a host is ejected from the connection pool. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as a gateway error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as a gateway error. This feature is disabled by default or when set to the value 0. \n Note that consecutive_gateway_errors and consecutive_5xx_errors can be used separately or together. Because the errors counted by consecutive_gateway_errors are also included in consecutive_5xx_errors, if the value of consecutive_gateway_errors is greater than or equal to the value of consecutive_5xx_errors, consecutive_gateway_errors will have no effect."
                                      properties:
                                        value:
                                          description: The uint32 value.
                                          format: int32
                                          type: integer
                                      type: object
                                    interval:
                                      description: 'Time interval between ejection sweep analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.'
                                      properties:
                                        nanos:
                                          description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                          format: int32
                                          type: integer
                                        seconds:
                                          description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                          format: int64
                                          type: integer
                                      type: object
                                    max_ejection_percent:
                                      description: Maximum % of hosts in the load balancing pool for the upstream service that can be ejected. Defaults to 10%.
                                      format: int32
                                      type: integer
                                    min_health_percent:
                                      description: Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode. When the percentage of healthy hosts in the load balancing pool drops below this threshold, outlier detection will be disabled and the proxy will load balance across all hosts in the pool (healthy and unhealthy). The threshold can be disabled by setting it to 0%. The default is 0% as it's not typically applicable in k8s environments with few pods per service.
                                      format: int32
                                      type: integer
                                  type: object
                                port:
                                  description: Specifies the number of a port on the destination service on which this policy is being applied.
                                  properties:
                                    number:
                                      description: Valid port number
                                      format: int32
                                      type: integer
                                  type: object
                                tls:
                                  description: TLS related settings for connections to the upstream service.
                                  properties:
                                    ca_certificates:
                                      description: 'OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server''s certificate. Should be empty if mode is `ISTIO_MUTUAL`.'
                                      type: string
                                    client_certificate:
                                      description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client-side TLS certificate to use. Should be empty if mode is `ISTIO_MUTUAL`.
                                      type: string
                                    mode:
                                      description: Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced.
                                      format: int32
                                      type: integer
                                    private_key:
                                      description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client's private key. Should be empty if mode is `ISTIO_MUTUAL`.
                                      type: string
                                    sni:
                                      description: SNI string to present to the server during TLS handshake.
                                      type: string
                                    subject_alt_names:
                                      description: A list of alternate names to verify the subject identity in the certificate. If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. If specified, this list overrides the value of subject_alt_names from the ServiceEntry.
                                      items:
                                        type: string
                                      type: array
                                  type: object
                              type: object
                            type: array
                          tls:
                            description: TLS related settings for connections to the upstream service.
                            properties:
                              ca_certificates:
                                description: 'OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server''s certificate. Should be empty if mode is `ISTIO_MUTUAL`.'
                                type: string
                              client_certificate:
                                description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client-side TLS certificate to use. Should be empty if mode is `ISTIO_MUTUAL`.
                                type: string
                              mode:
                                description: Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced.
                                format: int32
                                type: integer
                              private_key:
                                description: REQUIRED if mode is `MUTUAL`. The path to the file holding the client's private key. Should be empty if mode is `ISTIO_MUTUAL`.
                                type: string
                              sni:
                                description: SNI string to present to the server during TLS handshake.
                                type: string
                              subject_alt_names:
                                description: A list of alternate names to verify the subject identity in the certificate. If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. If specified, this list overrides the value of subject_alt_names from the ServiceEntry.
                                items:
                                  type: string
                                type: array
                            type: object
                        type: object
                    type: object
                type: object
            type: object
          status:
            description: ServicePolicyStatus defines the observed state of ServicePolicy
            properties:
              completionTime:
                description: Represents time when the strategy was completed. It is represented in RFC3339 form and is in UTC.
                format: date-time
                type: string
              conditions:
                description: The latest available observations of an object's current state.
                items:
                  description: StrategyCondition describes current state of a strategy.
                  properties:
                    lastProbeTime:
                      description: Last time the condition was checked.
                      format: date-time
                      type: string
                    lastTransitionTime:
                      description: Last time the condition transit from one status to another
                      format: date-time
                      type: string
                    message:
                      description: Human readable message indicating details about last transition.
                      type: string
                    reason:
                      description: reason for the condition's last transition
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown
                      type: string
                    type:
                      description: Type of strategy condition, Complete or Failed.
                      type: string
                  type: object
                type: array
              startTime:
                description: Represents time when the strategy was acknowledged by the controller. It is represented in RFC3339 form and is in UTC.
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: strategies.servicemesh.kubesphere.io
spec:
  group: servicemesh.kubesphere.io
  names:
    kind: Strategy
    listKind: StrategyList
    plural: strategies
    singular: strategy
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: type of strategy
      jsonPath: .spec.type
      name: Type
      type: string
    - description: destination hosts
      jsonPath: .spec.template.spec.hosts
      name: Hosts
      type: string
    - description: 'CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: Strategy is the Schema for the strategies API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StrategySpec defines the desired state of Strategy
            properties:
              governor:
                description: Governor version, the version takes control of all incoming traffic label version value
                type: string
              principal:
                description: Principal version, the one as reference version label version value
                type: string
              selector:
                description: Label selector for virtual services.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
              strategyPolicy:
                description: strategy policy, how the strategy will be applied by the strategy controller
                type: string
              template:
                description: Template describes the virtual service that will be created.
                properties:
                  metadata:
                    description: Metadata of the virtual services created from this template
                    type: object
                  spec:
                    description: Spec indicates the behavior of a virtual service.
                    properties:
                      export_to:
                        description: "A list of namespaces to which this virtual service is exported. Exporting a virtual service allows it to be used by sidecars and gateways defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of virtual services across namespace boundaries. \n If no namespaces are specified then the virtual service is exported to all namespaces by default. \n The value \".\" is reserved and defines an export to the same namespace that the virtual service is declared in. Similarly the value \"*\" is reserved and defines an export to all namespaces. \n NOTE: in the current release, the `exportTo` value is restricted to \".\" or \"*\" (i.e., the current namespace or all namespaces)."
                        items:
                          type: string
                        type: array
                      gateways:
                        description: The names of gateways and sidecars that should apply these routes. Gateways in other namespaces may be referred to by `<gateway namespace>/<gateway name>`; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService's namespace. A single VirtualService is used for sidecars inside the mesh as well as for one or more gateways. The selection condition imposed by this field can be overridden using the source field in the match conditions of protocol-specific routes. The reserved word `mesh` is used to imply all the sidecars in the mesh. When this field is omitted, the default gateway (`mesh`) will be used, which would apply the rule to all sidecars in the mesh. If a list of gateway names is provided, the rules will apply only to the gateways. To apply the rules to both gateways and sidecars, specify `mesh` as one of the gateway names.
                        items:
                          type: string
                        type: array
                      hosts:
                        description: "The destination hosts to which traffic is being sent. Could be a DNS name with wildcard prefix or an IP address.  Depending on the platform, short-names can also be used instead of a FQDN (i.e. has no dots in the name). In such a scenario, the FQDN of the host would be derived based on the underlying platform. \n A single VirtualService can be used to describe all the traffic properties of the corresponding hosts, including those for multiple HTTP and TCP ports. Alternatively, the traffic properties of a host can be defined using more than one VirtualService, with certain caveats. Refer to the [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services) for details. \n *Note for Kubernetes users*: When short names are used (e.g. \"reviews\" instead of \"reviews.default.svc.cluster.local\"), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the \"default\" namespace containing a host \"reviews\" will be interpreted as \"reviews.default.svc.cluster.local\", irrespective of the actual namespace associated with the reviews service. _To avoid potential misconfigurations, it is recommended to always use fully qualified domain names over short names._ \n The hosts field applies to both HTTP and TCP services. Service inside the mesh, i.e., those found in the service registry, must always be referred to using their alphanumeric names. IP addresses are allowed only for services defined via the Gateway. \n *Note*: It must be empty for a delegate VirtualService."
                        items:
                          type: string
                        type: array
                      http:
                        description: An ordered list of route rules for HTTP traffic. HTTP routes will be applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching an incoming request is used.
                        items:
                          description: Describes match conditions and actions for routing HTTP/1.1, HTTP2, and gRPC traffic. See VirtualService for usage examples.
                          properties:
                            cors_policy:
                              description: Cross-Origin Resource Sharing policy (CORS). Refer to [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) for further details about cross origin resource sharing.
                              properties:
                                allow_credentials:
                                  description: Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials. Translates to `Access-Control-Allow-Credentials` header.
                                  properties:
                                    value:
                                      description: The bool value.
                                      type: boolean
                                  type: object
                                allow_headers:
                                  description: List of HTTP headers that can be used when requesting the resource. Serialized to Access-Control-Allow-Headers header.
                                  items:
                                    type: string
                                  type: array
                                allow_methods:
                                  description: List of HTTP methods allowed to access the resource. The content will be serialized into the Access-Control-Allow-Methods header.
                                  items:
                                    type: string
                                  type: array
                                allow_origin:
                                  description: The list of origins that are allowed to perform CORS requests. The content will be serialized into the Access-Control-Allow-Origin header. Wildcard * will allow all origins. $hide_from_docs
                                  items:
                                    type: string
                                  type: array
                                allow_origins:
                                  description: String patterns that match allowed origins. An origin is allowed if any of the string matchers match. If a match is found, then the outgoing Access-Control-Allow-Origin would be set to the origin as provided by the client.
                                  items:
                                    description: Describes how to match a given string in HTTP headers. Match is case-sensitive.
                                    type: object
                                  type: array
                                expose_headers:
                                  description: A white list of HTTP headers that the browsers are allowed to access. Serialized into Access-Control-Expose-Headers header.
                                  items:
                                    type: string
                                  type: array
                                max_age:
                                  description: Specifies how long the results of a preflight request can be cached. Translates to the `Access-Control-Max-Age` header.
                                  properties:
                                    nanos:
                                      description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                      format: int32
                                      type: integer
                                    seconds:
                                      description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                      format: int64
                                      type: integer
                                  type: object
                              type: object
                            delegate:
                              description: 'Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute. It can be set only when `Route` and `Redirect` are empty, and the route rules of the delegate VirtualService will be merged with that in the current one. **NOTE**:    1. Only one level delegation is supported.    2. The delegate''s HTTPMatchRequest must be a strict subset of the root''s,       otherwise there is a conflict and the HTTPRoute will not take effect.'
                              properties:
                                name:
                                  description: Name specifies the name of the delegate VirtualService.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace where the delegate VirtualService resides. By default, it is same to the root's.
                                  type: string
                              type: object
                            fault:
                              description: Fault injection policy to apply on HTTP traffic at the client side. Note that timeouts or retries will not be enabled when faults are enabled on the client side.
                              properties:
                                abort:
                                  description: Abort Http request attempts and return error codes back to downstream service, giving the impression that the upstream service is faulty.
                                  properties:
                                    percentage:
                                      description: Percentage of requests to be aborted with the error code provided.
                                      properties:
                                        value:
                                          type: number
                                      type: object
                                  type: object
                                delay:
                                  description: Delay requests before forwarding, emulating various failures such as network issues, overloaded upstream service, etc.
                                  properties:
                                    percent:
                                      description: Percentage of requests on which the delay will be injected (0-100). Use of integer `percent` value is deprecated. Use the double `percentage` field instead.
                                      format: int32
                                      type: integer
                                    percentage:
                                      description: Percentage of requests on which the delay will be injected.
                                      properties:
                                        value:
                                          type: number
                                      type: object
                                  type: object
                              type: object
                            headers:
                              description: Header manipulation rules
                              properties:
                                request:
                                  description: Header manipulation rules to apply before forwarding a request to the destination service
                                  properties:
                                    add:
                                      additionalProperties:
                                        type: string
                                      description: Append the given values to the headers specified by keys (will create a comma-separated list of values)
                                      type: object
                                    remove:
                                      description: Remove a the specified headers
                                      items:
                                        type: string
                                      type: array
                                    set:
                                      additionalProperties:
                                        type: string
                                      description: Overwrite the headers specified by key with the given values
                                      type: object
                                  type: object
                                response:
                                  description: Header manipulation rules to apply before returning a response to the caller
                                  properties:
                                    add:
                                      additionalProperties:
                                        type: string
                                      description: Append the given values to the headers specified by keys (will create a comma-separated list of values)
                                      type: object
                                    remove:
                                      description: Remove a the specified headers
                                      items:
                                        type: string
                                      type: array
                                    set:
                                      additionalProperties:
                                        type: string
                                      description: Overwrite the headers specified by key with the given values
                                      type: object
                                  type: object
                              type: object
                            match:
                              description: Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed.
                              items:
                                description: "HttpMatchRequest specifies a set of criterion to be met in order for the rule to be applied to the HTTP request. For example, the following restricts the rule to match only requests where the URL path starts with /ratings/v2/ and the request contains a custom `end-user` header with value `jason`. \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: ratings-route spec:   hosts:   - ratings.prod.svc.cluster.local   http:   - match:     - headers:         end-user:           exact: jason       uri:         prefix: \"/ratings/v2/\"       ignoreUriCase: true     route:     - destination:         host: ratings.prod.svc.cluster.local ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata:   name: ratings-route spec:   hosts:   - ratings.prod.svc.cluster.local   http:   - match:     - headers:         end-user:           exact: jason       uri:         prefix: \"/ratings/v2/\"       ignoreUriCase: true     route:     - destination:         host: ratings.prod.svc.cluster.local ``` {{</tab>}} {{</tabset>}} \n HTTPMatchRequest CANNOT be empty. **Note:** No regex string match can be set when delegate VirtualService is specified."
                                properties:
                                  authority:
                                    description: "HTTP Authority values are case-sensitive and formatted as follows: \n - `exact: \"value\"` for exact string match \n - `prefix: \"value\"` for prefix-based match \n - `regex: \"value\"` for ECMAscript style regex-based match"
                                    type: object
                                  gateways:
                                    description: Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.
                                    items:
                                      type: string
                                    type: array
                                  headers:
                                    additionalProperties:
                                      description: Describes how to match a given string in HTTP headers. Match is case-sensitive.
                                      type: object
                                      x-kubernetes-preserve-unknown-fields: true
                                    description: "The header keys must be lowercase and use hyphen as the separator, e.g. _x-request-id_. \n Header values are case-sensitive and formatted as follows: \n - `exact: \"value\"` for exact string match \n - `prefix: \"value\"` for prefix-based match \n - `regex: \"value\"` for ECMAscript style regex-based match \n If the value is empty and only the name of header is specfied, presence of the header is checked. **Note:** The keys `uri`, `scheme`, `method`, and `authority` will be ignored."
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                  ignore_uri_case:
                                    description: "Flag to specify whether the URI matching should be case-insensitive. \n **Note:** The case will be ignored only in the case of `exact` and `prefix` URI matches."
                                    type: boolean
                                  method:
                                    description: "HTTP Method values are case-sensitive and formatted as follows: \n - `exact: \"value\"` for exact string match \n - `prefix: \"value\"` for prefix-based match \n - `regex: \"value\"` for ECMAscript style regex-based match"
                                    type: object
                                  name:
                                    description: The name assigned to a match. The match's name will be concatenated with the parent route's name and will be logged in the access logs for requests matching this route.
                                    type: string
                                  port:
                                    description: Specifies the ports on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.
                                    format: int32
                                    type: integer
                                  query_params:
                                    additionalProperties:
                                      description: Describes how to match a given string in HTTP headers. Match is case-sensitive.
                                      type: object
                                    description: "Query parameters for matching. \n Ex: - For a query parameter like \"?key=true\", the map key would be \"key\" and   the string match could be defined as `exact: \"true\"`. - For a query parameter like \"?key\", the map key would be \"key\" and the   string match could be defined as `exact: \"\"`. - For a query parameter like \"?key=123\", the map key would be \"key\" and the   string match could be defined as `regex: \"\\d+$\"`. Note that this   configuration will only match values like \"123\" but not \"a123\" or \"123a\". \n **Note:** `prefix` matching is currently not supported."
                                    type: object
                                  scheme:
                                    description: "URI Scheme values are case-sensitive and formatted as follows: \n - `exact: \"value\"` for exact string match \n - `prefix: \"value\"` for prefix-based match \n - `regex: \"value\"` for ECMAscript style regex-based match"
                                    type: object
                                  source_labels:
                                    additionalProperties:
                                      type: string
                                    description: One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.
                                    type: object
                                  source_namespace:
                                    description: Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.
                                    type: string
                                  uri:
                                    description: "URI to match values are case-sensitive and formatted as follows: \n - `exact: \"value\"` for exact string match \n - `prefix: \"value\"` for prefix-based match \n - `regex: \"value\"` for ECMAscript style regex-based match \n **Note:** Case-insensitive matching could be enabled via the `ignore_uri_case` flag."
                                    type: object
                                  without_headers:
                                    additionalProperties:
                                      description: Describes how to match a given string in HTTP headers. Match is case-sensitive.
                                      type: object
                                    description: withoutHeader has the same syntax with the header, but has opposite meaning. If a header is matched with a matching rule among withoutHeader, the traffic becomes not matched one.
                                    type: object
                                type: object
                              type: array
                            mirror:
                              description: Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination. Mirrored traffic is on a best effort basis where the sidecar/gateway will not wait for the mirrored cluster to respond before returning the response from the original destination.  Statistics will be generated for the mirrored destination.
                              properties:
                                host:
                                  description: "The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Traffic forwarded to destinations that are not found in either of the two, will be dropped. \n *Note for Kubernetes users*: When short names are used (e.g. \"reviews\" instead of \"reviews.default.svc.cluster.local\"), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the \"default\" namespace containing a host \"reviews will be interpreted as \"reviews.default.svc.cluster.local\", irrespective of the actual namespace associated with the reviews service. To avoid potential misconfiguration, it is recommended to always use fully qualified domain names over short names."
                                  type: string
                                port:
                                  description: Specifies the port on the host that is being addressed. If a service exposes only a single port it is not required to explicitly select the port.
                                  properties:
                                    number:
                                      description: Valid port number
                                      format: int32
                                      type: integer
                                  type: object
                                subset:
                                  description: The name of a subset within the service. Applicable only to services within the mesh. The subset must be defined in a corresponding DestinationRule.
                                  type: string
                              type: object
                            mirror_percent:
                              description: Percentage of the traffic to be mirrored by the `mirror` field. Use of integer `mirror_percent` value is deprecated. Use the double `mirror_percentage` field instead
                              properties:
                                value:
                                  description: The uint32 value.
                                  format: int32
                                  type: integer
                              type: object
                            mirror_percentage:
                              description: Percentage of the traffic to be mirrored by the `mirror` field. If this field is absent, all the traffic (100%) will be mirrored. Max value is 100.
                              properties:
                                value:
                                  type: number
                              type: object
                            name:
                              description: The name assigned to the route for debugging purposes. The route's name will be concatenated with the match's name and will be logged in the access logs for requests matching this route/match.
                              type: string
                            redirect:
                              description: A HTTP rule can either redirect or forward (default) traffic. If traffic passthrough option is specified in the rule, route/redirect will be ignored. The redirect primitive can be used to send a HTTP 301 redirect to a different URI or Authority.
                              properties:
                                authority:
                                  description: On a redirect, overwrite the Authority/Host portion of the URL with this value.
                                  type: string
                                redirect_code:
                                  description: On a redirect, Specifies the HTTP status code to use in the redirect response. The default response code is MOVED_PERMANENTLY (301).
                                  format: int32
                                  type: integer
                                uri:
                                  description: On a redirect, overwrite the Path portion of the URL with this value. Note that the entire path will be replaced, irrespective of the request URI being matched as an exact path or prefix.
                                  type: string
                              type: object
                            retries:
                              description: Retry policy for HTTP requests.
                              properties:
                                attempts:
                                  description: Number of retries for a given request. The interval between retries will be determined automatically (25ms+). Actual number of retries attempted depends on the request `timeout` of the [HTTP route](https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRoute).
                                  format: int32
                                  type: integer
                                per_try_timeout:
                                  description: 'Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.'
                                  properties:
                                    nanos:
                                      description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                      format: int32
                                      type: integer
                                    seconds:
                                      description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                      format: int64
                                      type: integer
                                  type: object
                                retry_on:
                                  description: Specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list. See the [retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on) and [gRPC retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on) for more details.
                                  type: string
                                retry_remote_localities:
                                  description: Flag to specify whether the retries should retry to other localities. See the [retry plugin configuration](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#retry-plugin-configuration) for more details.
                                  properties:
                                    value:
                                      description: The bool value.
                                      type: boolean
                                  type: object
                              type: object
                            rewrite:
                              description: Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with Redirect primitive. Rewrite will be performed before forwarding.
                              properties:
                                authority:
                                  description: rewrite the Authority/Host header with this value.
                                  type: string
                                uri:
                                  description: rewrite the path (or the prefix) portion of the URI with this value. If the original URI was matched based on prefix, the value provided in this field will replace the corresponding matched prefix.
                                  type: string
                              type: object
                            route:
                              description: A HTTP rule can either redirect or forward (default) traffic. The forwarding target can be one of several versions of a service (see glossary in beginning of document). Weights associated with the service version determine the proportion of traffic it receives.
                              items:
                                description: "Each routing rule is associated with one or more service versions (see glossary in beginning of document). Weights associated with the version determine the proportion of traffic it receives. For example, the following rule will route 25% of traffic for the \"reviews\" service to instances with the \"v2\" tag and the remaining traffic (i.e., 75%) to \"v1\". \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: reviews-route spec:   hosts:   - reviews.prod.svc.cluster.local   http:   - route:     - destination:         host: reviews.prod.svc.cluster.local         subset: v2       weight: 25     - destination:         host: reviews.prod.svc.cluster.local         subset: v1       weight: 75 ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata:   name: reviews-route spec:   hosts:   - reviews.prod.svc.cluster.local   http:   - route:     - destination:         host: reviews.prod.svc.cluster.local         subset: v2       weight: 25     - destination:         host: reviews.prod.svc.cluster.local         subset: v1       weight: 75 ``` {{</tab>}} {{</tabset>}} \n And the associated DestinationRule \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: DestinationRule metadata:   name: reviews-destination spec:   host: reviews.prod.svc.cluster.local   subsets:   - name: v1     labels:       version: v1   - name: v2     labels:       version: v2 ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: DestinationRule metadata:   name: reviews-destination spec:   host: reviews.prod.svc.cluster.local   subsets:   - name: v1     labels:       version: v1   - name: v2     labels:       version: v2 ``` {{</tab>}} {{</tabset>}} \n Traffic can also be split across two entirely different services without having to define new subsets. For example, the following rule forwards 25% of traffic to reviews.com to dev.reviews.com \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: reviews-route-two-domains spec:   hosts:   - reviews.com   http:   - route:     - destination:         host: dev.reviews.com       weight: 25     - destination:         host: reviews.com       weight: 75 ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata:   name: reviews-route-two-domains spec:   hosts:   - reviews.com   http:   - route:     - destination:         host: dev.reviews.com       weight: 25     - destination:         host: reviews.com       weight: 75 ``` {{</tab>}} {{</tabset>}}"
                                properties:
                                  destination:
                                    description: Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
                                    properties:
                                      host:
                                        description: "The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Traffic forwarded to destinations that are not found in either of the two, will be dropped. \n *Note for Kubernetes users*: When short names are used (e.g. \"reviews\" instead of \"reviews.default.svc.cluster.local\"), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the \"default\" namespace containing a host \"reviews will be interpreted as \"reviews.default.svc.cluster.local\", irrespective of the actual namespace associated with the reviews service. To avoid potential misconfiguration, it is recommended to always use fully qualified domain names over short names."
                                        type: string
                                      port:
                                        description: Specifies the port on the host that is being addressed. If a service exposes only a single port it is not required to explicitly select the port.
                                        properties:
                                          number:
                                            description: Valid port number
                                            format: int32
                                            type: integer
                                        type: object
                                      subset:
                                        description: The name of a subset within the service. Applicable only to services within the mesh. The subset must be defined in a corresponding DestinationRule.
                                        type: string
                                    type: object
                                  headers:
                                    description: Header manipulation rules
                                    properties:
                                      request:
                                        description: Header manipulation rules to apply before forwarding a request to the destination service
                                        properties:
                                          add:
                                            additionalProperties:
                                              type: string
                                            description: Append the given values to the headers specified by keys (will create a comma-separated list of values)
                                            type: object
                                          remove:
                                            description: Remove a the specified headers
                                            items:
                                              type: string
                                            type: array
                                          set:
                                            additionalProperties:
                                              type: string
                                            description: Overwrite the headers specified by key with the given values
                                            type: object
                                        type: object
                                      response:
                                        description: Header manipulation rules to apply before returning a response to the caller
                                        properties:
                                          add:
                                            additionalProperties:
                                              type: string
                                            description: Append the given values to the headers specified by keys (will create a comma-separated list of values)
                                            type: object
                                          remove:
                                            description: Remove a the specified headers
                                            items:
                                              type: string
                                            type: array
                                          set:
                                            additionalProperties:
                                              type: string
                                            description: Overwrite the headers specified by key with the given values
                                            type: object
                                        type: object
                                    type: object
                                  weight:
                                    description: The proportion of traffic to be forwarded to the service version. (0-100). Sum of weights across destinations SHOULD BE == 100. If there is only one destination in a rule, the weight value is assumed to be 100.
                                    format: int32
                                    type: integer
                                type: object
                              type: array
                            timeout:
                              description: Timeout for HTTP requests.
                              properties:
                                nanos:
                                  description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                                  format: int32
                                  type: integer
                                seconds:
                                  description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                                  format: int64
                                  type: integer
                              type: object
                          type: object
                        type: array
                      tcp:
                        description: An ordered list of route rules for opaque TCP traffic. TCP routes will be applied to any port that is not a HTTP or TLS port. The first rule matching an incoming request is used.
                        items:
                          description: "Describes match conditions and actions for routing TCP traffic. The following routing rule forwards traffic arriving at port 27017 for mongo.prod.svc.cluster.local to another Mongo server on port 5555. \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: bookinfo-Mongo spec:   hosts:   - mongo.prod.svc.cluster.local   tcp:   - match:     - port: 27017     route:     - destination:         host: mongo.backup.svc.cluster.local         port:           number: 5555 ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata:   name: bookinfo-Mongo spec:   hosts:   - mongo.prod.svc.cluster.local   tcp:   - match:     - port: 27017     route:     - destination:         host: mongo.backup.svc.cluster.local         port:           number: 5555 ``` {{</tab>}} {{</tabset>}}"
                          properties:
                            match:
                              description: Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed.
                              items:
                                description: L4 connection match attributes. Note that L4 connection matching support is incomplete.
                                properties:
                                  destination_subnets:
                                    description: IPv4 or IPv6 ip addresses of destination with optional subnet.  E.g., a.b.c.d/xx form or just a.b.c.d.
                                    items:
                                      type: string
                                    type: array
                                  gateways:
                                    description: Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.
                                    items:
                                      type: string
                                    type: array
                                  port:
                                    description: Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.
                                    format: int32
                                    type: integer
                                  source_labels:
                                    additionalProperties:
                                      type: string
                                    description: One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it should include the reserved gateway `mesh` in order for this field to be applicable.
                                    type: object
                                  source_namespace:
                                    description: Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.
                                    type: string
                                  source_subnet:
                                    description: IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d $hide_from_docs
                                    type: string
                                type: object
                              type: array
                            route:
                              description: The destination to which the connection should be forwarded to.
                              items:
                                description: L4 routing rule weighted destination.
                                properties:
                                  destination:
                                    description: Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
                                    properties:
                                      host:
                                        description: "The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Traffic forwarded to destinations that are not found in either of the two, will be dropped. \n *Note for Kubernetes users*: When short names are used (e.g. \"reviews\" instead of \"reviews.default.svc.cluster.local\"), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the \"default\" namespace containing a host \"reviews will be interpreted as \"reviews.default.svc.cluster.local\", irrespective of the actual namespace associated with the reviews service. To avoid potential misconfiguration, it is recommended to always use fully qualified domain names over short names."
                                        type: string
                                      port:
                                        description: Specifies the port on the host that is being addressed. If a service exposes only a single port it is not required to explicitly select the port.
                                        properties:
                                          number:
                                            description: Valid port number
                                            format: int32
                                            type: integer
                                        type: object
                                      subset:
                                        description: The name of a subset within the service. Applicable only to services within the mesh. The subset must be defined in a corresponding DestinationRule.
                                        type: string
                                    type: object
                                  weight:
                                    description: The proportion of traffic to be forwarded to the service version. If there is only one destination in a rule, all traffic will be routed to it irrespective of the weight.
                                    format: int32
                                    type: integer
                                type: object
                              type: array
                          type: object
                        type: array
                      tls:
                        description: 'An ordered list of route rule for non-terminated TLS & HTTPS traffic. Routing is typically performed using the SNI value presented by the ClientHello message. TLS routes will be applied to platform service ports named ''https-*'', ''tls-*'', unterminated gateway ports using HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service entry ports using HTTPS/TLS protocols.  The first rule matching an incoming request is used.  NOTE: Traffic ''https-*'' or ''tls-*'' ports without associated virtual service will be treated as opaque TCP traffic.'
                        items:
                          description: "Describes match conditions and actions for routing unterminated TLS traffic (TLS/HTTPS) The following routing rule forwards unterminated TLS traffic arriving at port 443 of gateway called \"mygateway\" to internal services in the mesh based on the SNI value. \n {{<tabset category-name=\"example\">}} {{<tab name=\"v1alpha3\" category-value=\"v1alpha3\">}} ```yaml apiVersion: networking.istio.io/v1alpha3 kind: VirtualService metadata:   name: bookinfo-sni spec:   hosts:   - \"*.bookinfo.com\"   gateways:   - mygateway   tls:   - match:     - port: 443       sniHosts:       - login.bookinfo.com     route:     - destination:         host: login.prod.svc.cluster.local   - match:     - port: 443       sniHosts:       - reviews.bookinfo.com     route:     - destination:         host: reviews.prod.svc.cluster.local ``` {{</tab>}} \n {{<tab name=\"v1beta1\" category-value=\"v1beta1\">}} ```yaml apiVersion: networking.istio.io/v1beta1 kind: VirtualService metadata:   name: bookinfo-sni spec:   hosts:   - \"*.bookinfo.com\"   gateways:   - mygateway   tls:   - match:     - port: 443       sniHosts:       - login.bookinfo.com     route:     - destination:         host: login.prod.svc.cluster.local   - match:     - port: 443       sniHosts:       - reviews.bookinfo.com     route:     - destination:         host: reviews.prod.svc.cluster.local ``` {{</tab>}} {{</tabset>}}"
                          properties:
                            match:
                              description: Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed.
                              items:
                                description: TLS connection match attributes.
                                properties:
                                  destination_subnets:
                                    description: IPv4 or IPv6 ip addresses of destination with optional subnet.  E.g., a.b.c.d/xx form or just a.b.c.d.
                                    items:
                                      type: string
                                    type: array
                                  gateways:
                                    description: Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.
                                    items:
                                      type: string
                                    type: array
                                  port:
                                    description: Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.
                                    format: int32
                                    type: integer
                                  sni_hosts:
                                    description: SNI (server name indicator) to match on. Wildcard prefixes can be used in the SNI value, e.g., *.com will match foo.example.com as well as example.com. An SNI value must be a subset (i.e., fall within the domain) of the corresponding virtual serivce's hosts.
                                    items:
                                      type: string
                                    type: array
                                  source_labels:
                                    additionalProperties:
                                      type: string
                                    description: One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it should include the reserved gateway `mesh` in order for this field to be applicable.
                                    type: object
                                  source_namespace:
                                    description: Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.
                                    type: string
                                type: object
                              type: array
                            route:
                              description: The destination to which the connection should be forwarded to.
                              items:
                                description: L4 routing rule weighted destination.
                                properties:
                                  destination:
                                    description: Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
                                    properties:
                                      host:
                                        description: "The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntry](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Traffic forwarded to destinations that are not found in either of the two, will be dropped. \n *Note for Kubernetes users*: When short names are used (e.g. \"reviews\" instead of \"reviews.default.svc.cluster.local\"), Istio will interpret the short name based on the namespace of the rule, not the service. A rule in the \"default\" namespace containing a host \"reviews will be interpreted as \"reviews.default.svc.cluster.local\", irrespective of the actual namespace associated with the reviews service. To avoid potential misconfiguration, it is recommended to always use fully qualified domain names over short names."
                                        type: string
                                      port:
                                        description: Specifies the port on the host that is being addressed. If a service exposes only a single port it is not required to explicitly select the port.
                                        properties:
                                          number:
                                            description: Valid port number
                                            format: int32
                                            type: integer
                                        type: object
                                      subset:
                                        description: The name of a subset within the service. Applicable only to services within the mesh. The subset must be defined in a corresponding DestinationRule.
                                        type: string
                                    type: object
                                  weight:
                                    description: The proportion of traffic to be forwarded to the service version. If there is only one destination in a rule, all traffic will be routed to it irrespective of the weight.
                                    format: int32
                                    type: integer
                                type: object
                              type: array
                          type: object
                        type: array
                    type: object
                type: object
              type:
                description: Strategy type
                type: string
            type: object
          status:
            description: StrategyStatus defines the observed state of Strategy
            properties:
              completionTime:
                description: Represents time when the strategy was completed. It is represented in RFC3339 form and is in UTC.
                format: date-time
                type: string
              conditions:
                description: The latest available observations of an object's current state.
                items:
                  description: StrategyCondition describes current state of a strategy.
                  properties:
                    lastProbeTime:
                      description: Last time the condition was checked.
                      format: date-time
                      type: string
                    lastTransitionTime:
                      description: Last time the condition transit from one status to another
                      format: date-time
                      type: string
                    message:
                      description: Human readable message indicating details about last transition.
                      type: string
                    reason:
                      description: reason for the condition's last transition
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown
                      type: string
                    type:
                      description: Type of strategy condition, Complete or Failed.
                      type: string
                  type: object
                type: array
              startTime:
                description: Represents time when the strategy was acknowledged by the controller. It is represented in RFC3339 form and is in UTC.
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: provisionercapabilities.storage.kubesphere.io
spec:
  group: storage.kubesphere.io
  names:
    kind: ProvisionerCapability
    listKind: ProvisionerCapabilityList
    plural: provisionercapabilities
    singular: provisionercapability
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.pluginInfo.name
          name: Provisioner
          type: string
        - jsonPath: .spec.features.volume.expandMode
          name: Expand
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ProvisionerCapability is the schema for the provisionercapability
            API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ProvisionerCapabilitySpec defines the desired state of ProvisionerCapability
              properties:
                features:
                  description: CapabilityFeatures describe storage features
                  properties:
                    snapshot:
                      description: SnapshotFeature describe snapshot features
                      properties:
                        create:
                          type: boolean
                        list:
                          type: boolean
                      required:
                        - create
                        - list
                      type: object
                    topology:
                      type: boolean
                    volume:
                      description: VolumeFeature describe volume features
                      properties:
                        attach:
                          type: boolean
                        clone:
                          type: boolean
                        create:
                          type: boolean
                        expandMode:
                          type: string
                        list:
                          type: boolean
                        stats:
                          type: boolean
                      required:
                        - attach
                        - clone
                        - create
                        - expandMode
                        - list
                        - stats
                      type: object
                  required:
                    - snapshot
                    - topology
                    - volume
                  type: object
                pluginInfo:
                  description: PluginInfo describes plugin info
                  properties:
                    name:
                      type: string
                    version:
                      type: string
                  required:
                    - name
                    - version
                  type: object
              required:
                - features
                - pluginInfo
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: storageclasscapabilities.storage.kubesphere.io
spec:
  group: storage.kubesphere.io
  names:
    kind: StorageClassCapability
    listKind: StorageClassCapabilityList
    plural: storageclasscapabilities
    singular: storageclasscapability
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.provisioner
          name: Provisioner
          type: string
        - jsonPath: .spec.features.volume.create
          name: Volume
          type: boolean
        - jsonPath: .spec.features.volume.expandMode
          name: Expand
          type: string
        - jsonPath: .spec.features.volume.clone
          name: Clone
          type: boolean
        - jsonPath: .spec.features.snapshot.create
          name: Snapshot
          type: boolean
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: StorageClassCapability is the Schema for the storage class capability
            API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: StorageClassCapabilitySpec defines the desired state of StorageClassCapability
              properties:
                features:
                  description: CapabilityFeatures describe storage features
                  properties:
                    snapshot:
                      description: SnapshotFeature describe snapshot features
                      properties:
                        create:
                          type: boolean
                        list:
                          type: boolean
                      required:
                        - create
                        - list
                      type: object
                    topology:
                      type: boolean
                    volume:
                      description: VolumeFeature describe volume features
                      properties:
                        attach:
                          type: boolean
                        clone:
                          type: boolean
                        create:
                          type: boolean
                        expandMode:
                          type: string
                        list:
                          type: boolean
                        stats:
                          type: boolean
                      required:
                        - attach
                        - clone
                        - create
                        - expandMode
                        - list
                        - stats
                      type: object
                  required:
                    - snapshot
                    - topology
                    - volume
                  type: object
                provisioner:
                  type: string
              required:
                - features
                - provisioner
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: workspaces.tenant.kubesphere.io
spec:
  group: tenant.kubesphere.io
  names:
    categories:
    - tenant
    kind: Workspace
    listKind: WorkspaceList
    plural: workspaces
    singular: workspace
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Workspace is the Schema for the workspaces API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: WorkspaceSpec defines the desired state of Workspace
            properties:
              manager:
                type: string
              networkIsolation:
                type: boolean
            type: object
          status:
            description: WorkspaceStatus defines the observed state of Workspace
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: (devel)
  creationTimestamp: null
  name: workspacetemplates.tenant.kubesphere.io
spec:
  group: tenant.kubesphere.io
  names:
    categories:
    - tenant
    kind: WorkspaceTemplate
    listKind: WorkspaceTemplateList
    plural: workspacetemplates
    singular: workspacetemplate
  scope: Cluster
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: WorkspaceTemplate is the Schema for the workspacetemplates API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              overrides:
                items:
                  properties:
                    clusterName:
                      type: string
                    clusterOverrides:
                      items:
                        properties:
                          op:
                            type: string
                          path:
                            type: string
                          value:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        required:
                        - path
                        type: object
                      type: array
                  required:
                  - clusterName
                  type: object
                type: array
              placement:
                properties:
                  clusterSelector:
                    description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                        type: object
                    type: object
                  clusters:
                    items:
                      properties:
                        name:
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                type: object
              template:
                properties:
                  metadata:
                    type: object
                  spec:
                    description: WorkspaceSpec defines the desired state of Workspace
                    properties:
                      manager:
                        type: string
                      networkIsolation:
                        type: boolean
                    type: object
                type: object
            required:
            - placement
            - template
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
